2
00:00:04,440 --> 00:00:08,010
So the reason our genre is
displayed as genre object one

3
00:00:08,020 --> 00:00:11,670
is that this is the default
 representation of a genre object as

4
00:00:11,670 --> 00:00:15,230
a string. 
So one way to fix this problem is to override the

5
00:00:15,230 --> 00:00:19,060
stair magic method in the genre class.
 Let me show you. So

6
00:00:19,070 --> 00:00:22,620
back in VSCode. 
In our movies app. 
Let's open up

7
00:00:22,630 --> 00:00:26,780
models dot py.
So here's our genre class. 
In

8
00:00:26,780 --> 00:00:30,270
this class we can override the
 str magic method to specify the

9
00:00:30,270 --> 00:00:34,150
string representation of a genre object. 
So

10
00:00:35,140 --> 00:00:39,990
let's define a method called str. 
These

11
00:00:39,990 --> 00:00:44,050
two underscores represent a magic method. So

12
00:00:44,540 --> 00:00:47,960
as the first parameter we need to add self. 
Now here was simply

13
00:00:47,960 --> 00:00:51,970
return self dot name. So

14
00:00:51,970 --> 00:00:55,550
we want to use the name of a
genre to represent it as a string. 
Save

15
00:00:55,550 --> 00:01:00,420
the changes. 
Back in admin.
Refresh the page. 
Now

16
00:01:00,470 --> 00:01:03,690
you see the actual name of the genre. Beautiful. 
Now

17
00:01:03,690 --> 00:01:07,390
let's take this to the next level.
 Let's say we want to add another column here

18
00:01:07,400 --> 00:01:10,630
to see the id of the genre. 
For that we need to go to our 

19
00:01:10,630 --> 00:01:15,980
movies app and open up 
the admin dot py module. 
Earlier 

20
00:01:15,980 --> 00:01:19,410
we registered the genre class with admin. 
Now

21
00:01:19,410 --> 00:01:23,000
to customize how we work
 with genres in our admin panel, we

22
00:01:23,000 --> 00:01:26,620
need to create another 
class called genre admin. 
Now

23
00:01:26,620 --> 00:01:30,240
to customize the list of genres in admin,
we need to create another

24
00:01:30,240 --> 00:01:34,170
class here called genre admin.
Let me show you. 
So 

25
00:01:34,170 --> 00:01:37,460
define a class called genre admin. 
The name

26
00:01:37,460 --> 00:01:41,340
doesn't matter, 
but by convention we use 
the name of our model plus

27
00:01:41,350 --> 00:01:45,690
admin. 
Now we should derive this class from admin

28
00:01:45,700 --> 00:01:49,750
dot model admin class. 
So

29
00:01:50,540 --> 00:01:54,240
on the top, 
look,
We're importing this admin module in

30
00:01:54,240 --> 00:01:58,130
this module we have this class ModelAdmin
 which is the representation of

31
00:01:58,130 --> 00:02:01,730
a model in the admin interface.
Now by deriving this

32
00:02:01,730 --> 00:02:05,360
class from model admin, we're going
to inherit all those features and

33
00:02:05,360 --> 00:02:08,830
then we can override some of them. 
For example here we

34
00:02:08,830 --> 00:02:12,500
can set list underline display attribute to

35
00:02:12,500 --> 00:02:15,690
the list of fields that
 we want to show here in

36
00:02:15,690 --> 00:02:19,470
this table. 
So back here. 
We set this to a tuple

37
00:02:19,480 --> 00:02:23,250
and in this tuple we specify all
the fields that we want to display. 
So

38
00:02:23,250 --> 00:02:27,120
we want to display the
 idea field followed by the

39
00:02:27,120 --> 00:02:30,750
name field. 
Save the changes.
Now when registering this

40
00:02:30,750 --> 00:02:34,850
genre we should also
pass this genre admin model.

41
00:02:35,640 --> 00:02:39,240
Save the changes one more time. 
Back on admin. 
Let's refresh

42
00:02:39,240 --> 00:02:42,980
this page. 
There we go.
We have two columns: id, name.

43
00:02:42,990 --> 00:02:46,470
Beautiful. 
So let's go ahead and add a new genre

44
00:02:46,470 --> 00:02:49,990
here. 
Here's our genre form.
Currently we only have one

45
00:02:49,990 --> 00:02:53,820
field name. 
id is not here because its value is automatically

46
00:02:53,820 --> 00:02:57,290
generated by our database.
This way we can ensure that every

47
00:02:57,290 --> 00:03:00,760
genre has a unique identifier. 
So let's

48
00:03:00,760 --> 00:03:06,120
create a new genre, comedy.
Now let's save this. Okay.

49
00:03:06,130 --> 00:03:09,280
So here's our second genre. Beautiful. 
Now here on

50
00:03:09,280 --> 00:03:12,570
this side map, let's go to our movies app. 
In this app we

51
00:03:12,570 --> 00:03:15,690
have the list of genres and movies.
Let's look at the

52
00:03:15,690 --> 00:03:18,990
list of movies. 
Currently we have no movies here.
So let's add a new

53
00:03:18,990 --> 00:03:22,710
movie. 
I'm going to call this Terminator,
release

54
00:03:22,710 --> 00:03:25,950
year I guess 198 I don't know five,
Let's

55
00:03:25,950 --> 00:03:29,250
say we have five DVDs of this movie in the stock, 
and the

56
00:03:29,250 --> 00:03:33,130
daily rental rate is 1.95 and

57
00:03:33,130 --> 00:03:36,240
below that we have this
 drop down list to select a

58
00:03:36,240 --> 00:03:39,440
genre. 
So I'm gonna set this to Action. 
See we

59
00:03:39,440 --> 00:03:43,460
get all this for free. 
We didn't have to manually create this form. 
Django

60
00:03:43,460 --> 00:03:47,600
automatically created it for us
and that's the beauty of using Django. 
Also

61
00:03:47,600 --> 00:03:51,320
below that we have a Date created.
So here we have the date component

62
00:03:51,320 --> 00:03:54,780
followed by the time component.
Here we have a calendar. 
We can select

63
00:03:54,780 --> 00:03:57,910
the date from. 
Its really powerful.
That's one of

64
00:03:57,910 --> 00:04:01,060
the reasons I love Django. 
Now Earlier when we

65
00:04:01,060 --> 00:04:04,470
added this date created field,
we set a default value for

66
00:04:04,470 --> 00:04:08,560
it based on the current datetime
 and you can see that populated here.

67
00:04:09,140 --> 00:04:11,940
Now let's say we don't want to
have this field on this form. 
We can easily

68
00:04:11,940 --> 00:04:15,170
hide it. 
Let me show you how. 
So Back to

69
00:04:15,170 --> 00:04:18,330
our admin module. 
That's similar to genre admin. 
We're going to

70
00:04:18,330 --> 00:04:23,510
create a model admin for our movie. 
So let's

71
00:04:23,510 --> 00:04:27,660
create another class movie admin

72
00:04:28,240 --> 00:04:33,140
and we derive this from admin dot model admin. 
Here

73
00:04:33,140 --> 00:04:37,510
we have a couple of attributes that we can override.
We can use fields to

74
00:04:37,510 --> 00:04:40,740
specify the fields that we want to show on our form. 
So we set

75
00:04:40,740 --> 00:04:45,020
this to tuple. 
Let's say we want to display the title and

76
00:04:45,030 --> 00:04:48,890
genre fields. 
Or we can use the exclude attribute

77
00:04:49,180 --> 00:04:52,270
to specify the fields that we wanna exclude. 
Once again we

78
00:04:52,270 --> 00:04:56,140
set this to tuple. 
In this case I want to exclude date

79
00:04:56,470 --> 00:04:59,880
underline created. 
Now because this tuple has only

80
00:04:59,880 --> 00:05:03,640
one item, we need to
 add a comma here otherwise Python

81
00:05:03,640 --> 00:05:07,360
thinks this is a string that 
we have wrapped in parenthesis. 
So

82
00:05:08,340 --> 00:05:12,650
here's our movie admin model.
Now we need to pass it while registering

83
00:05:12,650 --> 00:05:15,940
the movie class. 
So MovieAdmin. 
Save the

84
00:05:15,940 --> 00:05:19,310
changes. 
Back to the admin.
You can see the date

85
00:05:19,310 --> 00:05:22,590
created field is no longer here.
So there are various ways to

86
00:05:22,590 --> 00:05:25,740
customize the admin interface.
Now let's go ahead and create our

87
00:05:25,740 --> 00:05:30,570
first movie. 
So one more time. 
Terminator, 
1985

88
00:05:30,580 --> 00:05:33,720
10, 
1.95 and
by the way look at the

89
00:05:33,720 --> 00:05:37,240
type of these fields. 
So here we have a numeric field because

90
00:05:37,240 --> 00:05:40,800
we set the type of this field to a float. 
Now finally

91
00:05:40,800 --> 00:05:44,830
let's select the genre to Action and 
save the movie. 
Now

92
00:05:44,830 --> 00:05:48,440
here on the list of movies, once again 
we have the general representation of

93
00:05:48,440 --> 00:05:52,330
a movie as a string.
 so let's go ahead and add three columns

94
00:05:52,340 --> 00:05:55,990
in this table. 
Back to admin module. 
In

95
00:05:55,990 --> 00:05:59,710
the movie admin class.
 I'm going to override the list. Display

96
00:05:59,710 --> 00:06:04,360
. Attribute. Let's set this to
 a topple with three values. Title

97
00:06:05,340 --> 00:06:09,170
number in stock and daily

98
00:06:09,440 --> 00:06:12,860
rental. Right. Save

99
00:06:12,860 --> 00:06:16,870
the changes back here. Refresh. 
Oops.

100
00:06:16,870 --> 00:06:20,020
Our Web server crashed.
So let's go back to 

101
00:06:20,020 --> 00:06:23,640
VSCode and look at 
the terminal to see what happened. 
We

102
00:06:23,640 --> 00:06:27,270
got this error: 
The value of 'List_display[2] refers

103
00:06:27,270 --> 00:06:31,060
to 'daily_rental_rate', which is
 not a callable, an attribute

104
00:06:31,070 --> 00:06:34,880
of 'MovieAdmin'. 
So it looks like I made a mistake here.

105
00:06:34,890 --> 00:06:39,460
The name of this field is actually daily rate. so delayed

106
00:06:39,840 --> 00:06:43,530
. Save the changes and let's
 try it one more time. All

107
00:06:43,530 --> 00:06:47,250
right. 
So we've successfully customized the movies table.

108
00:06:47,840 --> 00:06:56,000
So we're done with the admin panel.
The next step is to 
display the list of our movies 
in the public area of our website.

