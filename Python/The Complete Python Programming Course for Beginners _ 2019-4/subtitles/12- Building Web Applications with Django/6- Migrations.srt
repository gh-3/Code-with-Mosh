2
00:00:04,000 --> 00:00:07,870
So we have created our model classes. 
Now we should be able to store

3
00:00:07,880 --> 00:00:11,280
our model objects in a database. 
How? 
That's pretty 

4
00:00:11,280 --> 00:00:15,000
easy. 
Look at this file here, db dot SQL light three. 

5
00:00:15,000 --> 00:00:18,290
This is a blank SQL database that

6
00:00:18,290 --> 00:00:21,760
Django admin automatically created for US. 
SQL light is

7
00:00:21,760 --> 00:00:25,190
a very simple, lightweight database
 that we often use in

8
00:00:25,200 --> 00:00:29,050
small applications like applications that
 we run on mobile devices.

9
00:00:29,060 --> 00:00:32,820
But it's not suitable
 for an Enterprise Web application

10
00:00:32,830 --> 00:00:36,020
that is supposed to serve
 thousands or even millions of

11
00:00:36,020 --> 00:00:39,860
users. 
So it doesn't have features 
like security and concurrency.

12
00:00:40,240 --> 00:00:44,000
In those situations we use
 databases like mySQL, sequel

13
00:00:44,000 --> 00:00:47,260
server by Microsoft, article, postgres and so on.

14
00:00:47,740 --> 00:00:51,390
The good thing is that
django supports all these database engines. For

15
00:00:51,390 --> 00:00:54,880
now we're going to go with
 this simple SQL light database and later

16
00:00:54,880 --> 00:00:58,660
in the future I'll show you how
 to replace this with a mySQL database.

17
00:00:59,240 --> 00:01:02,750
Now what I want you to do
 is to open up a browser and search

18
00:01:02,750 --> 00:01:06,410
for db browser for sqlite.
This is a simple application

19
00:01:06,410 --> 00:01:10,460
that we use to open a sqlite database. 
So

20
00:01:10,470 --> 00:01:13,950
let me quickly show you. 
Here it is.
So here you can create

21
00:01:13,960 --> 00:01:17,950
a new database or
open an existing one. 
I'm

22
00:01:17,950 --> 00:01:21,640
gonna open the sqlite database in our project. 
So let's

23
00:01:21,640 --> 00:01:24,940
drag and drop it here.
There you go. 
So currently we have

24
00:01:24,940 --> 00:01:28,250
no tables here and that means
 we have to create a couple of

25
00:01:28,250 --> 00:01:31,760
tables in order to
 store movies and genres in

26
00:01:31,760 --> 00:01:35,210
this database. 
Having said that, when using Django we

27
00:01:35,210 --> 00:01:39,050
don't have to manually design these tables.
 We can have Django automatically

28
00:01:39,050 --> 00:01:42,510
create them for us based on our models. 
So every

29
00:01:42,510 --> 00:01:46,100
time we create new model classes or 
modify existing ones,

30
00:01:46,110 --> 00:01:49,410
we tell Django to 
compare our model classes with

31
00:01:49,410 --> 00:01:52,630
our database. 
Django will look at our database,
it will figure out what

32
00:01:52,630 --> 00:01:56,490
tables and columns we have.
Then it will calculate the difference between

33
00:01:56,500 --> 00:01:59,890
our model classes and our database tables. 
And based

34
00:01:59,890 --> 00:02:03,370
on that, it will create a migration. 
A migration is

35
00:02:03,370 --> 00:02:06,700
essentially a python file that includes some code. 
When we

36
00:02:06,700 --> 00:02:10,600
run that, it will synchronize
 our database with our model classes.

37
00:02:10,610 --> 00:02:14,550
Let me show you.
So let's open up a terminal window and

38
00:02:14,550 --> 00:02:19,060
run python manage.py  makemigrations.

39
00:02:20,240 --> 00:02:23,730
Now it tells us that no
 changes are detected because by default django

40
00:02:23,730 --> 00:02:26,910
is not aware of our model classes.
 So the first step is

41
00:02:26,910 --> 00:02:30,080
to register our movies
 App with Django. Let me

42
00:02:30,080 --> 00:02:34,280
show you how to do that.
 So here in our project inside

43
00:02:34,400 --> 00:02:38,930
the vidly package, open settings.py. 
As

44
00:02:38,930 --> 00:02:42,540
I told you before, this file contains 
various configuration settings for our

45
00:02:42,540 --> 00:02:46,100
application. 
One of the settings is installed apps

46
00:02:46,120 --> 00:02:49,270
and these are the apps
that are installed by default. 
So the

47
00:02:49,270 --> 00:02:52,710
first one is admin.
 and this creates an administration panel for

48
00:02:52,710 --> 00:02:55,910
us. 
You're going to see that soon. 
We have auth which is

49
00:02:55,910 --> 00:02:59,660
an authentication framework, with this we'll
 be able to authenticate users and

50
00:02:59,660 --> 00:03:02,910
see if they have permission
to perform various tasks. 
We

51
00:03:02,910 --> 00:03:06,840
have content types which is
 a framework for creating generic relationships

52
00:03:06,840 --> 00:03:10,380
between model classes. 
We'll look at this in the future. 
Below

53
00:03:10,380 --> 00:03:13,850
that we have the sessions app
 which is a framework that allows us

54
00:03:13,860 --> 00:03:17,420
to temporarily store data
about the current user. 
Next

55
00:03:17,420 --> 00:03:20,930
we have the messaging framework
 and we use that in situations where,

56
00:03:20,940 --> 00:03:24,430
let's say the user creates a new movie
then we redirect them

57
00:03:24,440 --> 00:03:28,550
and display a message like
"the movie was successfully created". 
And

58
00:03:28,550 --> 00:03:32,000
finally we have staticfiles
 which is used for managing static

59
00:03:32,000 --> 00:03:35,500
files like CSS files, images and so on. 
Now

60
00:03:35,500 --> 00:03:39,050
in most applications we need
pretty much all these install apps. 
But

61
00:03:39,050 --> 00:03:42,080
if you don't need any of these apps in your application, 
you can simply come back

62
00:03:42,080 --> 00:03:45,730
here and delete that app.
Now in this demo we need to register

63
00:03:45,740 --> 00:03:49,310
our movies app here, So Django
can keep track of our model

64
00:03:49,310 --> 00:03:53,050
classes in that app.
So back to our movies folder.

65
00:03:53,440 --> 00:03:57,160
Here we have this file apps.py. 
Earlier

66
00:03:57,160 --> 00:04:00,530
I told you that here we
 can have various configuration settings for

67
00:04:00,530 --> 00:04:04,450
the movies app. 
So look at the name of this class: MoviesConfig.

68
00:04:04,840 --> 00:04:08,250
This class is in the apps module of

69
00:04:08,250 --> 00:04:11,600
the movies package. 
So to register the movies app with

70
00:04:11,600 --> 00:04:15,970
django, we need to provide the
complete path to this class. 
So

71
00:04:15,980 --> 00:04:20,230
back to settings.py. 
Here we add movies

72
00:04:20,240 --> 00:04:24,850
that's our package, 
then we go to the apps module and
finally MoviesConfig

73
00:04:24,860 --> 00:04:28,030
Save the changes. 
Now

74
00:04:28,030 --> 00:04:31,330
back in the terminal.
Let's run the makemigrations command one

75
00:04:31,330 --> 00:04:35,220
more time. Okay. 
This time django detected

76
00:04:35,220 --> 00:04:38,340
that there are some changes in
 the movies app, so it created a

77
00:04:38,340 --> 00:04:42,130
migration that is inside movies slash migrations

78
00:04:42,140 --> 00:04:45,960
slash this file. 
Let's have a quick look at this migration.

79
00:04:47,740 --> 00:04:51,080
So here we have a class called Migration 
and in this class

80
00:04:51,080 --> 00:04:54,220
we have a couple
 of operations for bringing our

81
00:04:54,220 --> 00:04:58,150
database up to date with
 our current model classes. So

82
00:04:58,150 --> 00:05:01,600
here's the first operation for creating a model. 
You can see

83
00:05:01,620 --> 00:05:04,820
the name is set to genre
 and here are the fields of the

84
00:05:04,820 --> 00:05:08,300
genre. 
So we have id and name. 
Now in our code we

85
00:05:08,300 --> 00:05:12,020
only specified the name field,
we didn't add the id field. 
Django

86
00:05:12,020 --> 00:05:15,530
automatically takes care of that.
So it ensures that every object has

87
00:05:15,530 --> 00:05:19,690
an id property that uniquely identifies that object. 
Similarly

88
00:05:19,690 --> 00:05:23,600
we have another create model operation for

89
00:05:23,600 --> 00:05:27,370
creating the movie table, 
and in this table we're going to have these

90
00:05:27,370 --> 00:05:30,800
fields: id which is added automatically,
 plus all these

91
00:05:30,800 --> 00:05:34,050
fields that we defined in our code. 
Now

92
00:05:34,050 --> 00:05:38,000
this migration is not executed yet.
 It simply describes the

93
00:05:38,010 --> 00:05:41,360
operations that need to be performed
 on the database to bring it

94
00:05:41,370 --> 00:05:44,980
up to date with our current model classes. 
So

95
00:05:44,980 --> 00:05:48,410
the next step is to run this migration. 
Now

96
00:05:48,410 --> 00:05:52,190
let me show you something.
Let's run python manage dot

97
00:05:52,190 --> 00:05:55,840
py runserver. 
Earlier

98
00:05:55,840 --> 00:06:00,030
you saw this error: 
You have 16 unapplied migrations.

99
00:06:00,240 --> 00:06:04,410
That basically means we have
 migrations that need to be executed. Earlier

100
00:06:04,410 --> 00:06:07,950
we had 15 migrations.
Now after adding these two classes we

101
00:06:07,950 --> 00:06:11,390
have a new migration, so we
have a total of 16 

102
00:06:11,390 --> 00:06:14,520
unapplied migrations. 
So let's stop the

103
00:06:14,520 --> 00:06:18,820
server with control and c 
and run python manage

104
00:06:18,820 --> 00:06:22,000
dot py migrate. 
This will

105
00:06:22,000 --> 00:06:25,430
run all depending migrations on our database. 
Let's

106
00:06:25,430 --> 00:06:28,660
go ahead. Beautiful. 
You can see all these migrations are

107
00:06:28,660 --> 00:06:32,200
applied. 
So as you can see, each of these migrations is

108
00:06:32,200 --> 00:06:35,530
prefixed with the name of the
app that contains it. 
So here

109
00:06:35,530 --> 00:06:39,240
we have a migration for our contenttypes app. 
Here's another

110
00:06:39,240 --> 00:06:42,950
migration for our auth app.
Below that we have three migrations

111
00:06:42,950 --> 00:06:46,370
for our admin app. 
So each app can have its own models and

112
00:06:46,370 --> 00:06:49,580
migrations. 
Now after all these migrations, you can

113
00:06:49,580 --> 00:06:53,290
see the migration in our movies app. 
Now

114
00:06:53,290 --> 00:06:56,460
if you open our sqlite database one more time, 
you can see we

115
00:06:56,460 --> 00:07:00,200
have a total of 13 tables.
 Each of these tables is

116
00:07:00,200 --> 00:07:03,710
prefixed with the name of the app that contains it. 
So here are

117
00:07:03,720 --> 00:07:07,260
the two tables for our movies app. 
We have movies underline genre

118
00:07:07,260 --> 00:07:10,880
and movies underline movie.
So the table names are

119
00:07:10,880 --> 00:07:14,300
in singular. 
Of course it's done by convention.
 and we can always

120
00:07:14,300 --> 00:07:17,980
override that in the future if you want to. 
Now let's expand

121
00:07:18,150 --> 00:07:21,730
the movie table. 
So we can see we have these columns:

122
00:07:21,730 --> 00:07:24,960
id, title, release_year and so on.
So we didn't have

123
00:07:24,960 --> 00:07:28,290
to manually create any of these tables.
 Django automatically created this

124
00:07:28,290 --> 00:07:32,000
for us.
Also we have this table django underlined

125
00:07:32,000 --> 00:07:35,220
migrations, 
Django uses this table to keep track of

126
00:07:35,220 --> 00:07:39,030
the migrations that are applied on the database. 
So let's

127
00:07:39,030 --> 00:07:42,760
go to browse data tab
 and from the list of tables

128
00:07:42,770 --> 00:07:46,390
select jangle migrations. 
You can see these are the migrations

129
00:07:46,390 --> 00:07:50,260
that are currently applied on our database.
If you scroll down,

130
00:07:50,740 --> 00:07:53,880
you can see here we have migration for our movies app. 
and this

131
00:07:53,880 --> 00:07:57,250
is the name of the migration.
And here's a daytime that 
this migration was applied.

