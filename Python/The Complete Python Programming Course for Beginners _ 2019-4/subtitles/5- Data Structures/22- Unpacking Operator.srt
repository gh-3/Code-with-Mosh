2
00:00:04,000 --> 00:00:08,450
So in this section you have learned a
 lot about data structures in Python. One

3
00:00:08,450 --> 00:00:12,360
operator that comes handy when
 working with these data structures is

4
00:00:12,360 --> 00:00:16,300
the unpacking operator. Let me
 show you how that works. So

5
00:00:16,300 --> 00:00:20,360
let's say we have a
 list of numbers. 123 If

6
00:00:20,360 --> 00:00:23,710
it print this list. we'll

7
00:00:23,710 --> 00:00:27,390
get a list on the terminal. But

8
00:00:27,390 --> 00:00:30,740
what if you want to
 print the individual numbers. In

9
00:00:30,750 --> 00:00:34,940
other words. what if we
 want to get an outward like

10
00:00:34,950 --> 00:00:38,170
this. Let's run this program. So here

11
00:00:38,170 --> 00:00:42,120
we don't have square brackets and
 we don't have comma. We're printing out

12
00:00:42,130 --> 00:00:45,790
individual numbers. individual items in our list. To

13
00:00:45,790 --> 00:00:49,070
achieve this. we can use
 the unpacking operator. So all we

14
00:00:49,070 --> 00:00:52,230
have to do is
 prefix this variable with the

15
00:00:52,240 --> 00:00:55,430
unpacking operator. In JavaScript. we have an

16
00:00:55,440 --> 00:00:58,710
operator called Spread Operator. which is three

17
00:00:58,710 --> 00:01:01,990
dots. This is exactly the same.
 So here we unpack a

18
00:01:01,990 --> 00:01:05,590
container. take out its individual elements and pass

19
00:01:05,590 --> 00:01:09,560
them as arbitrary arguments
 to the print function. Now

20
00:01:09,800 --> 00:01:14,120
. if we run this program.
 we get the exact same outfit. Another

21
00:01:14,120 --> 00:01:18,050
useful application of this
 is when creating lists. So

22
00:01:18,050 --> 00:01:21,440
let's say we want to have
 the list of numbers from 0 to

23
00:01:21,440 --> 00:01:25,150
5. You know that
 this range function returns a

24
00:01:25,150 --> 00:01:28,270
range object. so we need
 to convert it to a

25
00:01:28,270 --> 00:01:32,530
list and then stored a result in It's

26
00:01:32,530 --> 00:01:36,050
variable. Now let's print this. We

27
00:01:36,050 --> 00:01:39,510
get 0 to 4 beautiful.
In this case instead of calling

28
00:01:39,510 --> 00:01:43,360
the list function, we can
 use the unpacking operator. So

29
00:01:43,940 --> 00:01:47,750
we call range of five. This returns an iterable.

30
00:01:47,750 --> 00:01:51,400
right? 
The good thing about this unpacking operator is

31
00:01:51,400 --> 00:01:54,550
that we can unpack any iterable.
 It doesn't have to be a

32
00:01:54,550 --> 00:01:58,040
list. So we unpack this iterable.
 which basically means

33
00:01:58,180 --> 00:02:01,690
we take individual values.
 Then we put them in

34
00:02:01,690 --> 00:02:05,270
a list and finally
 start a result here. By

35
00:02:05,270 --> 00:02:10,460
the same token. we can
 unpack a string. so unpack

36
00:02:10,470 --> 00:02:13,750
a string like Hello. Now let's take

37
00:02:13,750 --> 00:02:17,190
a look at the result.
 So we have the numbers 0

38
00:02:17,190 --> 00:02:20,950
to 4 now because
 we're unpacking this Hello string.

39
00:02:21,340 --> 00:02:24,760
We're getting individual characters
 and put them in our list

40
00:02:25,440 --> 00:02:28,720
So these are some cool tricks that
 we can do in Python that as far

41
00:02:28,720 --> 00:02:32,460
as I know, 
we don't have in other popular languages.

42
00:02:33,140 --> 00:02:36,500
let's look at another example. 
Using this operator, we

43
00:02:36,500 --> 00:02:40,850
can combine multiple lists.
So here we can have my

44
00:02:40,850 --> 00:02:46,130
list and another list. 
Now,

45
00:02:46,140 --> 00:02:49,620
to combine these lists,
 we can unpack the

46
00:02:49,620 --> 00:02:52,870
first one and then the 
second one. 
We can

47
00:02:52,870 --> 00:02:56,900
also put something in the middle or unpack

48
00:02:56,910 --> 00:03:00,900
a string at the end. Hello. 
So it's very powerful. 
Now,

49
00:03:00,900 --> 00:03:04,130
we can also unpack dictionaries,
but we need to use two

50
00:03:04,130 --> 00:03:08,490
asterics. 
Let me show you.
So I'm going to define one

51
00:03:08,490 --> 00:03:13,090
dictionary. Let's add a
 key value pair here. so

52
00:03:13,100 --> 00:03:16,980
X. Now let's define the second dictionary. I'm

53
00:03:16,980 --> 00:03:20,490
going to repeat X here.
 but with a different value. and also

54
00:03:20,490 --> 00:03:23,750
add why. Now. To

55
00:03:23,750 --> 00:03:27,090
combine these dictionaries. we can use the

56
00:03:27,100 --> 00:03:30,820
unpacking operator so we
 create an empty dictionary. We

57
00:03:30,830 --> 00:03:34,350
unpacked the first dictionary. This will take out

58
00:03:34,360 --> 00:03:38,020
all the key value pairs in our first dictionary.
And

59
00:03:38,020 --> 00:03:41,650
then we'll unpack the second dictionary. 
We

60
00:03:41,650 --> 00:03:45,750
can additionally add another key value pair. 
Now

61
00:03:45,820 --> 00:03:50,240
let's print the result. 
Note

62
00:03:50,240 --> 00:03:53,780
that the value of X is 10.
So if you have multiple items with

63
00:03:53,780 --> 00:03:57,880
the same key, the last
value will be used. 
So

64
00:03:57,880 --> 00:04:05,000
to recap: 
we can use the unpacking operator to 
take out individual values in 
any iterable.

