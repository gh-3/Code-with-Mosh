2
00:00:04,480 --> 00:00:07,640
All right. 
Time for an exercise.
This exercise I'm going to give you

3
00:00:07,640 --> 00:00:11,510
is one of my favorite, because 
it's a common interview question

4
00:00:11,520 --> 00:00:14,930
that big companies like Microsoft, Amazon and Google

5
00:00:14,930 --> 00:00:18,330
used a lot. 
So let's say we have some text. 
I

6
00:00:18,330 --> 00:00:22,040
want you to write a program
to find the most repeated character in

7
00:00:22,040 --> 00:00:25,470
this text. 
So pause the video, 
work on this exercise for

8
00:00:25,470 --> 00:00:32,220
5 to 10 minutes, 
when you're done,
come back continue watching. 
All

9
00:00:32,220 --> 00:00:35,580
right. 
How do we solve this problem?
Well, first we need to know how

10
00:00:35,580 --> 00:00:39,540
many times each character is repeated?
Once we have that information

11
00:00:39,580 --> 00:00:43,000
then we can find the most repeated character. 
What kind

12
00:00:43,000 --> 00:00:46,840
of data structure is useful for storing this information? 
A

13
00:00:46,840 --> 00:00:50,120
dictionary; 
because a dictionary is a collection of key

14
00:00:50,120 --> 00:00:53,300
value pairs, so here we
 can use the characters as

15
00:00:53,300 --> 00:00:56,760
the keys and the repetition as the value.

16
00:00:57,140 --> 00:01:00,700
So I'm going to start by defining an empty dictionary. 
Let's

17
00:01:00,700 --> 00:01:05,180
call it char or character frequency. 
We

18
00:01:05,180 --> 00:01:08,490
set it to an empty dictionary.
Now we need to iterate over

19
00:01:08,490 --> 00:01:12,610
this string, 
get each character and 
update its frequency in

20
00:01:12,610 --> 00:01:16,360
this dictionary, 
so we need a for loop for char

21
00:01:16,840 --> 00:01:20,000
in sentence. 
Now, first we need to

22
00:01:20,000 --> 00:01:23,410
see if you have this character in our dictionary? 
If we don't

23
00:01:23,410 --> 00:01:26,980
have it we need to set its frequency to one, 
otherwise we

24
00:01:26,980 --> 00:01:30,630
need to increment the frequency. 
So if

25
00:01:30,630 --> 00:01:34,280
char in char_frequency. 
If

26
00:01:34,280 --> 00:01:37,790
we do have it then we simply get

27
00:01:37,790 --> 00:01:41,340
the value and increment it by

28
00:01:41,340 --> 00:01:44,510
one. 
otherwise, we need to add it

29
00:01:44,510 --> 00:01:48,920
to our dictionary. 
So char_frequency of

30
00:01:48,920 --> 00:01:52,100
char set it to one.
So let's print this

31
00:01:52,100 --> 00:01:56,480
dictionary and see what we get?
char_frequency. 
There

32
00:01:56,480 --> 00:01:59,880
you go. 
run the program. 
So capital T

33
00:01:59,880 --> 00:02:03,500
is repeated once, 
h is repeated Once, 
i is

34
00:02:03,500 --> 00:02:06,640
repeated five times and so on.
Now this output is

35
00:02:06,640 --> 00:02:09,880
a little bit unreadable, 
so I'm going to show you a trick to make

36
00:02:09,880 --> 00:02:13,310
it more readable.
 We have a module called Pretty

37
00:02:13,310 --> 00:02:18,140
Printing. 
So on the top from

38
00:02:18,140 --> 00:02:21,910
pprint module, 
we need to import

39
00:02:21,910 --> 00:02:25,690
pprint function. 
With this function, we have more control

40
00:02:25,690 --> 00:02:30,250
over printing stuff on the terminal.
So here instead

41
00:02:30,250 --> 00:02:34,360
of the regular print function,
we use pprint, 
And

42
00:02:34,620 --> 00:02:38,640
as the second argument
we pass a keyword argument

43
00:02:38,650 --> 00:02:42,290
called width, 
that determines the number of characters on

44
00:02:42,290 --> 00:02:45,650
each line. 
If this output doesn't fit,
this function will

45
00:02:45,650 --> 00:02:49,560
add a line break. 
Let's set this to 1 and see what happens. 
We

46
00:02:49,560 --> 00:02:53,080
run the program. 
So this is a better way of

47
00:02:53,080 --> 00:02:56,690
printing a dictionary. 
So now we have all the information to

48
00:02:56,690 --> 00:03:00,550
solve this problem. 
The next step is to sort this dictionary by

49
00:03:00,550 --> 00:03:03,970
the frequency of characters. 
However, as

50
00:03:03,970 --> 00:03:07,420
I told you before, 
dictionaries like sets are 

51
00:03:07,420 --> 00:03:10,990
unordered collections, We cannot sort them. 
We can only sort 

52
00:03:10,990 --> 00:03:15,010
lists. 
So we need to pull out the items in this dictionary and

53
00:03:15,010 --> 00:03:18,310
put them in a list for sorting.
So basically we need to take

54
00:03:18,310 --> 00:03:21,610
out each key value pair, 
 convert it to a tuple and

55
00:03:21,610 --> 00:03:24,860
then put it in a list. 
we'll  end up with a list of tuples that

56
00:03:24,860 --> 00:03:29,370
we can easily sort. 
So how do we do this? 
Pay

57
00:03:29,370 --> 00:03:32,680
close attention to what I'm going to do.
I'm going to call the

58
00:03:32,680 --> 00:03:36,030
sorted function. 
Earlier You learn that this function takes

59
00:03:36,030 --> 00:03:39,250
an iterable and sorts it.
As the iterable, I'm going

60
00:03:39,250 --> 00:03:43,170
to pass char_frequency dot

61
00:03:43,390 --> 00:03:47,250
items. 
Earlier you learn
 that this method returns all

62
00:03:47,250 --> 00:03:50,410
the key value pairs as tuples. 
So at

63
00:03:50,410 --> 00:03:53,760
this point if we print this result, let's

64
00:03:53,760 --> 00:03:57,740
see what we get?
We get a list of tuples,

65
00:03:57,750 --> 00:04:01,000
in each tuple we have two items:
the first is the character and the

66
00:04:01,000 --> 00:04:04,220
second is the repetition or frequency.
But as you 

67
00:04:04,220 --> 00:04:07,750
can see, this list is not sorted because 
by default this 

68
00:04:07,750 --> 00:04:13,240
sorted function doesn't know how to sort these tuples. 
So

69
00:04:13,240 --> 00:04:16,880
earlier I told you that we
 can pass a second argument here

70
00:04:16,890 --> 00:04:20,540
key, 
we set this to a lambda, which

71
00:04:20,540 --> 00:04:23,940
is an anonymous function,
this function takes the key value

72
00:04:23,940 --> 00:04:27,160
pair and 
returns the value, so that

73
00:04:27,160 --> 00:04:30,930
is key value of one, that is the frequency of

74
00:04:30,930 --> 00:04:34,680
each character. 
We're going to use that for sorting. 
So

75
00:04:34,810 --> 00:04:38,100
let's run the program one more time. 
Now,

76
00:04:38,100 --> 00:04:41,810
as you can see, this list is sorted. 
So T is

77
00:04:41,810 --> 00:04:45,430
the least repeated character and space and

78
00:04:45,430 --> 00:04:48,690
i are the most repeated characters. 
Now

79
00:04:48,690 --> 00:04:52,160
we need to reverse the sorting, so back

80
00:04:52,160 --> 00:04:55,500
to our sorted function,
 as the third argument We're

81
00:04:55,500 --> 00:04:59,390
going to pass the keyword argument: reverse equals

82
00:04:59,400 --> 00:05:02,780
True. 
Save the changes Run the program one

83
00:05:02,780 --> 00:05:06,190
more time. 
Now, all these items are sorted in

84
00:05:06,190 --> 00:05:09,650
descending order. Beautiful. 
So instead

85
00:05:09,650 --> 00:05:13,990
of printing the result, let's store it in

86
00:05:13,990 --> 00:05:19,260
a list like char_frequency underlie sorted. 
Finally

87
00:05:19,270 --> 00:05:23,270
the first item in this list, is the solution to our problem. 
So

88
00:05:23,270 --> 00:05:27,350
we simply print char_frequency_sorted

89
00:05:27,360 --> 00:05:30,940
of zero. 
Save the changes. 
Run

90
00:05:30,940 --> 00:05:34,810
the program one more time.
So i is the most repeated character

91
00:05:34,820 --> 00:05:38,950
with five repetitions. 
Now, one final improvement.

92
00:05:39,340 --> 00:05:43,010
You can see the code on line 12,
 it's kind of outside the screen,

93
00:05:43,070 --> 00:05:46,570
partly this is because 
I've zoomed in so you can see properly. 
But

94
00:05:46,570 --> 00:05:49,980
pepe8 recommends a
 maximum of 80 characters on

95
00:05:49,980 --> 00:05:53,280
one line,
so if you have a line that is too long, 
it's better to

96
00:05:53,280 --> 00:05:56,960
break it down into multiple lines,
this makes your code more readable.

97
00:05:57,340 --> 00:06:00,910
So here I'm going to list each

98
00:06:00,920 --> 00:06:05,040
argument on a new line. Like this. 
That

99
00:06:05,050 --> 00:06:08,700
is better. 
And that brings us
 to the end of this section. 
 In

100
00:06:08,700 --> 00:06:12,120
the next section, you're going to
learn about errors and exceptions. 
I hope

101
00:06:12,120 --> 00:06:16,160
you enjoyed the section and
thank you for watching.

