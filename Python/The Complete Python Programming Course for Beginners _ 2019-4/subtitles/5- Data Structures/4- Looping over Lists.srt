1
00:00:00,840 --> 00:00:04,190
mhm in

2
00:00:04,190 --> 00:00:07,720
this lecture. I'm going to show you
 how to loop over lists. So here

3
00:00:07,720 --> 00:00:11,260
we have a list of three
 items we can use our for loops

4
00:00:11,460 --> 00:00:15,260
to loops over this list.
 So for letter

5
00:00:15,840 --> 00:00:19,720
in letters colon and then we print each

6
00:00:19,720 --> 00:00:23,160
letter. 
save the changes
and run the code. 
We

7
00:00:23,160 --> 00:00:26,770
get a b c. 
Now what if you want to get the index

8
00:00:26,770 --> 00:00:30,260
of each item as well?
 Well we have a built in function

9
00:00:30,260 --> 00:00:33,630
called enumerate. We call

10
00:00:33,630 --> 00:00:37,560
it here. and this will
 return an enumerate object which

11
00:00:37,560 --> 00:00:41,070
is iterable. In each iteration this enumerate

12
00:00:41,070 --> 00:00:44,320
object will give us a topple.
 Let me show you. So

13
00:00:44,320 --> 00:00:47,620
now when we run this code.
Look. 
In each

14
00:00:47,630 --> 00:00:50,820
iteration we're getting a topple.
 So to topple. As

15
00:00:50,820 --> 00:00:54,100
I told you before, 
it's like a list but
it's read only.
we

16
00:00:54,100 --> 00:00:57,640
cannot add new items to it.
 So in each iteration

17
00:00:57,640 --> 00:01:01,130
we're getting a topple of two items. 
The first item

18
00:01:01,130 --> 00:01:04,650
in this topple is the index and
the second item

19
00:01:05,040 --> 00:01:08,780
is the item at that index.
 So now. to get the index

20
00:01:08,990 --> 00:01:12,550
we can use square brackets
 to access the first item in

21
00:01:12,550 --> 00:01:15,800
this topple. So if it print letter of

22
00:01:15,800 --> 00:01:20,260
zero. We will get the indexes and

23
00:01:20,260 --> 00:01:24,080
right next to that we
 can add letter of one. So

24
00:01:24,080 --> 00:01:28,040
we will see the item
 at a given index. But

25
00:01:28,040 --> 00:01:31,200
this syntax is a little bit ugly.
 In the last lecture you've

26
00:01:31,200 --> 00:01:34,340
learned about list unpacking. 
So if we

27
00:01:34,340 --> 00:01:38,200
have a list with two items zero

28
00:01:38,210 --> 00:01:41,950
and a we can unpack it into

29
00:01:41,950 --> 00:01:45,910
two variables like this: index comma letter

30
00:01:46,040 --> 00:01:49,710
equals items. So here we are unpacking the

31
00:01:49,720 --> 00:01:53,560
items list. 
Now what if we change square brackets

32
00:01:53,760 --> 00:01:56,850
to parenthesis? 
Now we have a topple and we

33
00:01:56,850 --> 00:02:00,210
can still unpack this topple. So you

34
00:02:00,210 --> 00:02:03,950
saw that this enumerate function returns an enumerate

35
00:02:03,960 --> 00:02:07,930
object which is iterable. In each iteration this

36
00:02:07,940 --> 00:02:11,140
enumerate object will return a topple that

37
00:02:11,140 --> 00:02:14,860
looks like this. 
So we can unpack it right here

38
00:02:15,540 --> 00:02:19,640
. So we add another variable index. Now

39
00:02:19,640 --> 00:02:22,920
. with this. we no longer
 have to use square brackets and

40
00:02:22,920 --> 00:02:27,200
we can simply print index and letter. Let's

41
00:02:27,200 --> 00:02:30,530
run this code.
 There you go. So now we

42
00:02:30,530 --> 00:02:33,960
don't need this anymore. So

43
00:02:33,960 --> 00:02:37,390
to recap. you can use
 four loops to iterate over

44
00:02:37,390 --> 00:02:40,950
lists. If you also need the index.
 you should call the

45
00:02:40,960 --> 00:02:44,580
enumerate function this will return and enumerate object

46
00:02:44,700 --> 00:02:48,140
which is iterable in each iteration.
 It will return to

47
00:02:48,140 --> 00:02:51,520
topple and you can unpack that topple right

