2
00:00:04,000 --> 00:00:07,740
In the last lecture. you learn about stacks.
 you learn that stacks have

3
00:00:07,740 --> 00:00:11,250
delightful behavior. Last in. First out

4
00:00:11,840 --> 00:00:15,430
. we have another very
 useful data structure called Q. which

5
00:00:15,430 --> 00:00:19,150
has the Pfeifle behavior first in First Out

6
00:00:19,160 --> 00:00:22,510
. and it resembles a Q.
 In the real world. let's say

7
00:00:22,510 --> 00:00:25,680
a queue of people to get
 into a restaurant. The first person in

8
00:00:25,680 --> 00:00:29,130
the queue is the first person
 who would get in Now. Technically. you

9
00:00:29,130 --> 00:00:33,050
can use a list to
 implement a Queue in python. So

10
00:00:33,050 --> 00:00:36,460
let's say we have a queue of three items.
 If you want to remove

11
00:00:36,460 --> 00:00:39,800
an item from this. Q.
 We should remove the one at the

12
00:00:39,800 --> 00:00:43,420
beginning as opposed to the
 one at the end. So

13
00:00:43,420 --> 00:00:47,670
we removed one and then
 two and then three. However

14
00:00:47,780 --> 00:00:51,230
if you're dealing with a large
 list or a large Queue, you might see

15
00:00:51,230 --> 00:00:54,840
some adverse effect on the performance because

16
00:00:54,850 --> 00:00:58,330
let's say we have a large
 number of items in this list. Every

17
00:00:58,330 --> 00:01:01,900
time we remove an item from
 the beginning of this list, all

18
00:01:01,900 --> 00:01:05,240
the other items need to
 be shifted to the left. So

19
00:01:05,240 --> 00:01:08,580
if you have a list with 1000
 and one items, when you remove one

20
00:01:08,580 --> 00:01:12,800
item, 1000 items need to
 be moved in memory. In

21
00:01:12,800 --> 00:01:16,400
situations like that, it's more
 efficient to use a DQueue

22
00:01:16,400 --> 00:01:20,580
object. Let me show you
 how to do that. So first

23
00:01:20,580 --> 00:01:24,510
we need to import Dqueue
 you from the collections module. I'm

24
00:01:24,510 --> 00:01:27,770
going to talk about modules later in the course. 
For now let's

25
00:01:27,770 --> 00:01:31,260
imagine a module is a bucket
 with a bunch of reusable code.

26
00:01:31,740 --> 00:01:34,940
So from collections.
 that's the name of our

27
00:01:34,940 --> 00:01:38,240
module. We should import deque which is

28
00:01:38,240 --> 00:01:41,370
a class. 
Again I'm going to talk about classes later in the

29
00:01:41,370 --> 00:01:45,410
course. so we import a deque class here. 
Now,

30
00:01:45,420 --> 00:01:49,190
instead of defining a variable and
 sending it to an empty list, we

31
00:01:49,190 --> 00:01:53,330
should wrap this list with a deque object. 
So we

32
00:01:53,330 --> 00:01:57,120
call deque and pass

33
00:01:57,130 --> 00:02:01,410
our empty list as an argument. 
This

34
00:02:01,410 --> 00:02:04,700
deque object has similar methods that we have in

35
00:02:04,700 --> 00:02:08,830
the list object. 
So we can call queue dot append. 
Let's

36
00:02:08,830 --> 00:02:12,900
append a few items here. 1 2 3. 
Now

37
00:02:12,900 --> 00:02:16,940
to remove an item from the
 beginning of the queue, We call queue

38
00:02:16,940 --> 00:02:20,970
dot pop left.
 We don't have this method in list

39
00:02:20,980 --> 00:02:24,620
objects. 
So after we remove one item, let's

40
00:02:24,620 --> 00:02:28,110
look at our queue. 
There

41
00:02:28,110 --> 00:02:31,660
you go. 
You can see one is removed and now we only have 2 and

42
00:02:31,660 --> 00:02:35,120
3. 
Also similar to lists, We can easily

43
00:02:35,120 --> 00:02:38,980
check to see if a queue is empty using the not operator. 
So

44
00:02:38,990 --> 00:02:42,380
if not queue,
 that means we have an empty

45
00:02:42,380 --> 00:02:50,000
queue, then we can print something like empty.
So this is all about queues.

