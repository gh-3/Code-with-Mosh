2
00:00:04,000 --> 00:00:08,080
In Pytho we have a very
 powerful data structure called Dictionary

3
00:00:08,160 --> 00:00:11,740
that is basically a collection
 of key value pairs. We

4
00:00:11,740 --> 00:00:15,250
use it to map a key to a value. 
A real world example

5
00:00:15,250 --> 00:00:18,690
of this is a phone book.
 In the phone book. we map a

6
00:00:18,690 --> 00:00:21,870
person's name to their contact details. so we

7
00:00:21,870 --> 00:00:25,850
use a person's name as the
 key and their contact information as

8
00:00:25,850 --> 00:00:29,090
the value. So a phone
 book is a dictionary. It's a

9
00:00:29,090 --> 00:00:32,360
collection of key value pairs.
 Now let me show you

10
00:00:32,360 --> 00:00:35,510
how to work with dictionaries in Pisa.
 so I'm going to

11
00:00:35,510 --> 00:00:38,830
define a variable point. We can

12
00:00:38,830 --> 00:00:42,330
set it to an empty dictionary.
 or we can add one or

13
00:00:42,330 --> 00:00:45,940
more key value pairs Here.
 Here is an example we said x

14
00:00:45,950 --> 00:00:49,270
21 and why to

15
00:00:49,270 --> 00:00:53,220
to So in this example.
 I'm using a string for the key and

16
00:00:53,220 --> 00:00:56,780
and in order for the value. 
In python we can only

17
00:00:56,780 --> 00:01:00,120
use immutable types for the keys.
 So quite often we

18
00:01:00,120 --> 00:01:03,400
use strings and numbers.
 But the value can be

19
00:01:03,400 --> 00:01:06,710
of any type. There are no limitations.
 so here's one

20
00:01:06,710 --> 00:01:10,020
way to define a dictionary.
 We can also use the

21
00:01:10,020 --> 00:01:14,390
Dict function just like
 we have the list topple

22
00:01:14,400 --> 00:01:17,960
and set functions. We also
 have the dict functions that

23
00:01:17,960 --> 00:01:21,480
we can use to
 create a dictionary. So let

24
00:01:21,480 --> 00:01:25,220
me redefine point by calling the

25
00:01:25,230 --> 00:01:28,640
dicks function. So when
 we call this function. we

26
00:01:28,640 --> 00:01:32,060
pass one or more keyword arguments. Remember

27
00:01:32,060 --> 00:01:35,460
keyword arguments. So X equals one

28
00:01:36,140 --> 00:01:39,810
. This is a keyword argument.
 We can also set why

29
00:01:39,810 --> 00:01:43,400
to to now I personally prefer the second approach

30
00:01:43,410 --> 00:01:46,920
because we don't have to deal with this quote.
 I find this syntax a

31
00:01:46,920 --> 00:01:50,000
little bit cleaner and shorter.
 So now we have a

32
00:01:50,000 --> 00:01:53,750
dictionary. We can get the
 value associated with the key using

33
00:01:53,750 --> 00:01:57,520
an index. So point of X

34
00:01:57,940 --> 00:02:01,850
note that our index is
 the name of a key. So

35
00:02:01,850 --> 00:02:05,330
because dictionaries are collections of
 key value pairs. we cannot

36
00:02:05,340 --> 00:02:08,620
access an item using a
 numeric index as we do

37
00:02:08,620 --> 00:02:12,420
with lists. So here we
 are getting the value associated

38
00:02:12,420 --> 00:02:16,270
with the key eggs.
 Let's print it on the terminal. so

39
00:02:16,270 --> 00:02:19,760
we get one.
 Similarly. we can change the value

40
00:02:19,760 --> 00:02:23,580
of X to a new value. Now

41
00:02:23,580 --> 00:02:26,830
let's print our dictionary. So X is

42
00:02:26,830 --> 00:02:29,920
10. Why is too beautiful.
 We can add a

43
00:02:29,920 --> 00:02:34,190
new key. So let's
 set Z to 20 and

44
00:02:34,190 --> 00:02:38,020
then print the point.
 So now we have three key

45
00:02:38,020 --> 00:02:41,730
value pairs. Now. when reading a value. if

46
00:02:41,730 --> 00:02:45,390
you use an invalid key
 will get an error. So let's

47
00:02:45,390 --> 00:02:48,850
look up the value of the
 item with the key A and then

48
00:02:48,850 --> 00:02:52,390
print this. Run the program. We

49
00:02:52,390 --> 00:02:56,420
get this error. Kierra.
 There are two workarounds here. One

50
00:02:56,420 --> 00:02:59,950
solution is to check for
 the existence of a key. So

51
00:03:00,940 --> 00:03:04,180
if a in point. then we'll

52
00:03:04,180 --> 00:03:08,840
get the value of the
 item with Kia and printed. Now

53
00:03:08,960 --> 00:03:12,440
we don't get the error anymore.
 The other solution is to

54
00:03:12,440 --> 00:03:17,020
use the get method.
 So instead of using brackets and

55
00:03:17,030 --> 00:03:21,180
the name of the key.
 we call the get method. Here

56
00:03:21,180 --> 00:03:24,860
we pass the name of the key.
 Let's print it

57
00:03:25,540 --> 00:03:28,780
So if the key
 doesn't exist by default. it

58
00:03:28,780 --> 00:03:32,960
returns None. 
Or we can pass a default value

59
00:03:33,050 --> 00:03:36,330
as the second argument.
 So we say. Hey. if

60
00:03:36,330 --> 00:03:39,500
you don't have an item with the key
 a return zero by

61
00:03:39,500 --> 00:03:43,260
default. let's take a look.
 Now we get zero Beautiful

62
00:03:44,940 --> 00:03:48,780
. To delete an item.
 we use the del or delete statement. So

63
00:03:48,780 --> 00:03:52,390
delayed point of X. Now

64
00:03:52,390 --> 00:03:55,670
let's print point and look

65
00:03:55,670 --> 00:03:59,020
at the results. So X is gone.
 We only have Y and

66
00:03:59,020 --> 00:04:03,090
Z. so these are
 the basic operations around dictionaries

67
00:04:03,100 --> 00:04:06,490
. We can easily add new items.
 remove existing ones and look

68
00:04:06,490 --> 00:04:09,820
up items by their key.
 Finally. let me show you how

69
00:04:09,820 --> 00:04:13,210
to loop over dictionaries.
 So if we write a

70
00:04:13,210 --> 00:04:16,540
simple for statement for X in

71
00:04:16,540 --> 00:04:22,460
point. let's see what we get. We

72
00:04:22,460 --> 00:04:26,580
get y and Z, 
So in each iteration our

73
00:04:26,580 --> 00:04:30,040
loop variable will hold the
 key of an item. So

74
00:04:30,040 --> 00:04:33,600
it's better to rename
 this to key. Now we

75
00:04:33,600 --> 00:04:36,770
can print the key as
 well as the value associated with

76
00:04:36,770 --> 00:04:40,760
the key. So we write point of key

77
00:04:42,540 --> 00:04:46,250
. As you can see why
 is to NZ is 20. There

78
00:04:46,250 --> 00:04:49,940
is another way to
 iterate over a dictionary. So

79
00:04:49,940 --> 00:04:54,370
here we can call point that items. Now

80
00:04:54,370 --> 00:04:58,600
let me rename key to
 eggs and just print X

81
00:04:59,040 --> 00:05:02,390
. Let's see what we get.
 So in each

82
00:05:02,400 --> 00:05:05,660
iteration we get a tuple. 
In this tuple We

83
00:05:05,660 --> 00:05:09,160
have the key and the
 value so we can unpack it

84
00:05:09,170 --> 00:05:12,470
right here We can extract key and

85
00:05:12,470 --> 00:05:17,580
value and simply print them here like

86
00:05:17,580 --> 00:05:24,000
this. 
When we run the program, 
we'll get the same result

