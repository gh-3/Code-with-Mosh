2
00:00:04,000 --> 00:00:08,100
In Python we can also use inheritance
with the built in types. 
For

3
00:00:08,100 --> 00:00:11,630
example. 
we can create a class context and having

4
00:00:11,640 --> 00:00:15,260
been heard from 
the built in string class. 
With

5
00:00:15,260 --> 00:00:18,620
this our text class will
 inherit all the features of

6
00:00:18,620 --> 00:00:22,010
python strings. 
But we can also add additional features to

7
00:00:22,010 --> 00:00:25,590
it. 
For example we can
add the ability to summarize it

8
00:00:25,600 --> 00:00:29,250
or duplicated and so on. 
So let's define

9
00:00:29,740 --> 00:00:33,800
a method called duplicate that takes self and

10
00:00:33,800 --> 00:00:37,370
in this method we'll simply return self plus

11
00:00:37,450 --> 00:00:41,250
self. 
So let me explain what's going on here. 
As

12
00:00:41,250 --> 00:00:44,850
I told you before, self represents the current object which

13
00:00:44,850 --> 00:00:48,370
is in this case an instance of a string class. 
So

14
00:00:48,370 --> 00:00:51,670
here we're contaminating a string with itself. 
Now

15
00:00:51,670 --> 00:00:55,230
we can easily use
 our text class. So let's

16
00:00:55,230 --> 00:01:00,760
add python store.
 The result in this variable look

17
00:01:01,140 --> 00:01:04,760
. Our text object has
 all the methods of python strings

18
00:01:05,140 --> 00:01:10,500
so we can convert it
 to lower case and printed. And

19
00:01:10,500 --> 00:01:14,580
here's the result. But we
 can also duplicate it. Sir. when

20
00:01:14,580 --> 00:01:17,870
we duplicated. we get a new string. which

21
00:01:17,870 --> 00:01:21,570
is Python Python. pretty useful. right. As another

22
00:01:21,570 --> 00:01:25,370
example. we can also extend python lists So

23
00:01:25,520 --> 00:01:28,690
let's define in your class. Call it

24
00:01:28,690 --> 00:01:32,320
trackable list that it hurts from

25
00:01:32,380 --> 00:01:36,520
the built in list class.
 Now. here I want to override the

26
00:01:36,520 --> 00:01:40,200
append method. So every time we

27
00:01:40,200 --> 00:01:43,650
want to append an object to this list.
 we want to print a message on

28
00:01:43,650 --> 00:01:47,340
the terminal. perhaps for logging. So let's

29
00:01:47,340 --> 00:01:51,360
print a pant called Now

30
00:01:51,360 --> 00:01:54,730
we want to call the open
 method of the super class the base

31
00:01:54,730 --> 00:01:58,960
class. So we call super dot append

32
00:01:59,640 --> 00:02:03,240
and pass this object. 
So here technically we're

33
00:02:03,250 --> 00:02:06,500
extending the append method of the list class, 
We're not

34
00:02:06,500 --> 00:02:09,770
replacing it. Okay. No. We can

35
00:02:09,770 --> 00:02:14,120
create a list object using trackable list called

36
00:02:14,120 --> 00:02:17,390
append method. 
And when we run this

37
00:02:17,390 --> 00:02:21,240
program, 
you can see this message on the terminal.
 So

38
00:02:21,240 --> 00:02:24,660
as you see extending building types in python 
is really easy.

