WEBVTT

1
00:00:04.000 --> 00:00:08.000
In the last lecture, we added the body of our email right here.

2
00:00:08.000 --> 00:00:12.000
But that's not how we build real applications, because in a real applicaton

3
00:00:12.000 --> 00:00:16.000
the body of an email can be several lines of text, you don't want to write all that

4
00:00:16.000 --> 00:00:20.000
text here. Quite often you put that text in a separate file as

5
00:00:20.000 --> 00:00:24.000
a template. And we use html to build that template.

6
00:00:24.000 --> 00:00:28.000
html is the language of the web, that's the language we use to build web pages.

7
00:00:28.000 --> 00:00:32.000
We use it to present content, so if you're not familiar with html,

8
00:00:32.000 --> 00:00:36.000
don't worry there are plenty of tutorials online, you can learn it on your own. Just

9
00:00:36.000 --> 00:00:40.000
follow along with me and see how we can create templates in python.

10
00:00:40.000 --> 00:00:44.000
So, in a project folder, I'm going to add a new folder,

11
00:00:44.000 --> 00:00:48.000
and call it template, .html. Now in a

12
00:00:48.000 --> 00:00:52.000
real application, we often have different templates for different scenarios, such

13
00:00:52.000 --> 00:00:56.000
as when a user signs up or attempts to reset their password but places in the

14
00:00:56.000 --> 00:01:00.000
word order, these are different scenarios. So we need different templates for these scenarios.

15
00:01:00.000 --> 00:01:04.000
And we should name our template files based on those scenarios.

16
00:01:04.000 --> 00:01:08.000
In this demo I'm just going to go with a simple name like template.html.

17
00:01:08.000 --> 00:01:12.000
Now let me show you a cool technique to quickly

18
00:01:12.000 --> 00:01:16.000
generate some html code. We type an exclamation mark,

19
00:01:16.000 --> 00:01:20.000
and press tab, so now we have a basic html,

20
00:01:20.000 --> 00:01:24.000
template, when sending emails, we don't need anything in the

21
00:01:24.000 --> 00:01:28.000
head section, so let's delete this, in the body

22
00:01:28.000 --> 00:01:32.000
I'm going to type something like this, hi user, this is our test

23
00:01:32.000 --> 00:01:36.000
email. Now what if you want to dynamically replace this with

24
00:01:36.000 --> 00:01:40.000
the recipient. So let's define a parameter that we can replace later.

25
00:01:40.000 --> 00:01:44.000
To define a parameter, we start with a dollar sign and then

26
00:01:44.000 --> 00:01:48.000
give that parameter a name. For example name, now let's

27
00:01:48.000 --> 00:01:52.000
save the changes, beautiful. Back to our app.pi

28
00:01:52.000 --> 00:01:56.000
here on the top from the string

29
00:01:56.000 --> 00:02:00.000
module, we need to import the template class,

30
00:02:00.000 --> 00:02:04.000
we use this class to replace these paramours in the

31
00:02:04.000 --> 00:02:08.000
template string. Let me show you how that works. So back to

32
00:02:08.000 --> 00:02:12.000
app.pi. Let's create

33
00:02:12.000 --> 00:02:16.000
the template object, here we need to pass our template as a string,

34
00:02:16.000 --> 00:02:20.000
so I'm going to create a path object

35
00:02:20.000 --> 00:02:24.000
to load template.html, here we

36
00:02:24.000 --> 00:02:28.000
call read text this returns the entire

37
00:02:28.000 --> 00:02:32.000
content of this file as a string. Now we have a template object,

38
00:02:32.000 --> 00:02:36.000
this template object has a method called

39
00:02:36.000 --> 00:02:40.000
substitute. With this method we can replace

40
00:02:40.000 --> 00:02:44.000
parameters dynamically. Let me show you how that works. So,

41
00:02:44.000 --> 00:02:48.000
let's delete this line. Where we're attaching,

42
00:02:48.000 --> 00:02:52.000
the body of this message, instead of

43
00:02:52.000 --> 00:02:56.000
hard coding this body here,

44
00:02:56.000 --> 00:03:00.000
let's call template.subsitute,

45
00:03:00.000 --> 00:03:04.000
now here we can pass a dictionary that contains two key

46
00:03:04.000 --> 00:03:08.000
value pairs or parameters of template, or we can pass keyword

47
00:03:08.000 --> 00:03:12.000
now to make this code a little bit cleaner, let me put this on a separate line,

48
00:03:12.000 --> 00:03:16.000
so let's call this here, pass

49
00:03:16.000 --> 00:03:20.000
a dictionary, in this dictionary we should have a key called

50
00:03:20.000 --> 00:03:24.000
name and lets set that to John.

51
00:03:24.000 --> 00:03:28.000
This substitute method will return a string. So let's call that

52
00:03:28.000 --> 00:03:32.000
body and then we pass it here and

53
00:03:32.000 --> 00:03:36.000
finally we change plain to html.

54
00:03:36.000 --> 00:03:40.000
Save the changes run the program,

55
00:03:40.000 --> 00:03:44.000
ok, beautiful, and, here's our new

56
00:03:44.000 --> 00:03:48.000
email message, hi John this is our test email. Now this email

57
00:03:48.000 --> 00:03:52.000
message is pretty simple it doesn't use any of the features of html,

58
00:03:52.000 --> 00:03:56.000
so let's go back to our template, and make the name of the user

59
00:03:56.000 --> 00:04:00.000
bold. So here in our template file, I'm going to

60
00:04:00.000 --> 00:04:04.000
add a string tag around the name

61
00:04:04.000 --> 00:04:08.000
parameter, this will make the name of the user (?).

62
00:04:08.000 --> 00:04:12.000
Save the changes. back to app.py let's run the

63
00:04:12.000 --> 00:04:16.000
application one more time. Okay, now,

64
00:04:16.000 --> 00:04:20.000
here we get a new email, and as you can see the name of the user

65
00:04:20.000 --> 00:04:24.000
is bold. So this is the benefit of using html over

66
00:04:24.000 --> 00:04:28.000
plain text.Â Now back to this substitute method, as I

67
00:04:28.000 --> 00:04:32.000
told you, we can pass a dictionary, so you might have dictionary that includes all

68
00:04:32.000 --> 00:04:36.000
the values that you want to replace dynamically, if that's the case, pass

69
00:04:36.000 --> 00:04:40.000
a dictionary object here. Alternatively you can pass keyword arguments.

70
00:04:40.000 --> 00:04:44.000
So instead of passing dictionary we can pass

71
00:04:44.000 --> 00:04:48.000
keyword argument name = John, exactly the same.

72
00:04:48.000 --> 00:04:52.000
So this is all about templates in python.
