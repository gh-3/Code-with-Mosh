WEBVTT

1
00:00:04.000 --> 00:00:08.000
You might want to create a python program that expands command line arguments.

2
00:00:08.000 --> 00:00:12.000
Just like this python program itself, that receives the name of our python

3
00:00:12.000 --> 00:00:16.000
file as an argument. Now we can extend this, take it to the next level,

4
00:00:16.000 --> 00:00:20.000
and supply additional arguments here. These arguments can be

5
00:00:20.000 --> 00:00:24.000
the name of a user, email, password, whatever. So,

6
00:00:24.000 --> 00:00:28.000
on the top we import the sys module.

7
00:00:28.000 --> 00:00:32.000
This module has an attribute called argv short

8
00:00:32.000 --> 00:00:36.000
for argument variables,Â so let's print his on the terminal

9
00:00:36.000 --> 00:00:40.000
now back on the terminal, let's execute

10
00:00:40.000 --> 00:00:44.000
this command, we get an array of 4 items,

11
00:00:44.000 --> 00:00:48.000
the first item is always the name of our python program. So even if we don't

12
00:00:48.000 --> 00:00:52.000
supply any arguments, we'll get an array of one item.

13
00:00:52.000 --> 00:00:56.000
After that we have all these arguments represented as

14
00:00:56.000 --> 00:01:00.000
separate items. With this we can do something interesting like this.

15
00:01:00.000 --> 00:01:04.000
We can get the length of

16
00:01:04.000 --> 00:01:08.000
this array and if it equals one that means the user has not

17
00:01:08.000 --> 00:01:12.000
supplied any arguments. As I told you this array always has

18
00:01:12.000 --> 00:01:16.000
a base 1 item and that is the name of our file. So we can

19
00:01:16.000 --> 00:01:20.000
print a usage message like python3,

20
00:01:20.000 --> 00:01:24.000
app.py and after that we expect the password

21
00:01:24.000 --> 00:01:28.000
otherwise assuming that the user

22
00:01:28.000 --> 00:01:32.000
has supplied this argument, we can read it like this. Password,

23
00:01:32.000 --> 00:01:36.000
equals sys.argv.1

24
00:01:36.000 --> 00:01:40.000
and then we can print it on the terminal like this.

25
00:01:40.000 --> 00:01:44.000
Back on the terminal lets run python 3,

26
00:01:44.000 --> 00:01:48.000
app.py we get the usage message beautiful.

27
00:01:48.000 --> 00:01:52.000
Now if you pass 1234 that is considered password.
