WEBVTT

1
00:00:04.000 --> 00:00:08.000
In this lecture you're going to learn about the useful methods to work with files.

2
00:00:08.000 --> 00:00:12.000
So here we have the path object that references a file, we can check to see

3
00:00:12.000 --> 00:00:16.000
if this file exists, we can rename it to

4
00:00:16.000 --> 00:00:20.000
let's say init.txt. We can delete it by

5
00:00:20.000 --> 00:00:24.000
calling the unlink method. We also have

6
00:00:24.000 --> 00:00:28.000
this stat method that returns information about this file.

7
00:00:28.000 --> 00:00:32.000
So let me comment out these few lines and look at what this method

8
00:00:32.000 --> 00:00:36.000
returns. We get a state_result

9
00:00:36.000 --> 00:00:40.000
object with these attributes, for example, st underline size

10
00:00:40.000 --> 00:00:44.000
this returns the size of this file in bytes, we can also get

11
00:00:44.000 --> 00:00:48.000
the last access time, the last modify time, and the creation

12
00:00:48.000 --> 00:00:52.000
time. Now all these time values are in seconds after epic which

13
00:00:52.000 --> 00:00:56.000
is the start of time on a computer. And that is platform dependent for example

14
00:00:56.000 --> 00:01:00.000
on unix systems the epic time is january 1st,

15
00:01:00.000 --> 00:01:04.000
1970. So to print the human readable time,

16
00:01:04.000 --> 00:01:08.000
on the top, from the time module, you need to import

17
00:01:08.000 --> 00:01:12.000
the c time function. Now from this stat object we can

18
00:01:12.000 --> 00:01:16.000
pick st_ctime that is the

19
00:01:16.000 --> 00:01:20.000
creation time. And then pass it to the c time, function,

20
00:01:20.000 --> 00:01:24.000
let's run this program

21
00:01:24.000 --> 00:01:28.000
so this is the creation time of this file. We also have

22
00:01:28.000 --> 00:01:32.000
a couple methods for reading data from a file so pass.

23
00:01:32.000 --> 00:01:36.000
.read bytes which returns the content of the file

24
00:01:36.000 --> 00:01:40.000
as bytes object when representing binary data, we also have

25
00:01:40.000 --> 00:01:44.000
read_text which returns the content of the file as a string,

26
00:01:44.000 --> 00:01:48.000
so we can simply print the result here, and

27
00:01:48.000 --> 00:01:52.000
this is the content of my py file, now using this method is

28
00:01:52.000 --> 00:01:56.000
easier then built in open function that I have mentioned throughout the course,

29
00:01:56.000 --> 00:02:00.000
with the open function, we'll have to specify the file name,

30
00:02:00.000 --> 00:02:04.000
let's say init.py then we need to specify mode

31
00:02:04.000 --> 00:02:08.000
and this returns a file object so we're going to make sure to close it

32
00:02:08.000 --> 00:02:12.000
so as a best practice we should use the with statement

33
00:02:12.000 --> 00:02:16.000
then get the file object like this, then do something, in

34
00:02:16.000 --> 00:02:20.000
contrast, when we use read_text, all this

35
00:02:20.000 --> 00:02:24.000
magic happens inside of this method so we no longer have to worry about

36
00:02:24.000 --> 00:02:28.000
opening a file, closing it and so on. Similar to read text and

37
00:02:28.000 --> 00:02:32.000
read bytes we have write text,

38
00:02:32.000 --> 00:02:36.000
so we can call it to write some textual data to a file or

39
00:02:36.000 --> 00:02:40.000
path.write_bytes, again both these methods take

40
00:02:40.000 --> 00:02:44.000
care of opening and closing a file. So with this path object, we can

41
00:02:44.000 --> 00:02:48.000
do all kinds of operations for the file. However, when it comes to copying

42
00:02:48.000 --> 00:02:52.000
a file, this path object is not the ideal way

43
00:02:52.000 --> 00:02:56.000
to copy a file. Let me show you. So, I'm going to comment out these few lines,

44
00:02:56.000 --> 00:03:00.000
let's say you want to copy this file to a different location, so I'm

45
00:03:00.000 --> 00:03:04.000
going to rename this path to source and then

46
00:03:04.000 --> 00:03:08.000
I'm going to create a target path, which would be, let's say the current

47
00:03:08.000 --> 00:03:12.000
directory plus init

48
00:03:12.000 --> 00:03:16.000
.py. Now to copy this file we'll have to write code

49
00:03:16.000 --> 00:03:20.000
like this. First we need to write the content of the source so read

50
00:03:20.000 --> 00:03:24.000
text. Then we need to write it to the target so

51
00:03:24.000 --> 00:03:28.000
target.write text like this.

52
00:03:28.000 --> 00:03:32.000
It's a little bit tedious. There is a better way. We have a module called

53
00:03:32.000 --> 00:03:36.000
sh util or shell utilities, and this module

54
00:03:36.000 --> 00:03:40.000
provides a number of high level operations for copying and moving files

55
00:03:40.000 --> 00:03:44.000
and directors. So on the top, let's

56
00:03:44.000 --> 00:03:48.000
import shutil. Now with this module

57
00:03:48.000 --> 00:03:52.000
we can easily copy source,

58
00:03:52.000 --> 00:03:56.000
to target. This approach is cleaner and easier, than

59
00:03:56.000 --> 00:03:59.166
using a path object.
