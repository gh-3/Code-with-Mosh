WEBVTT

1
00:00:04.000 --> 00:00:08.000
In this tutorial, you're going to learn how to call external programs from your

2
00:00:08.000 --> 00:00:12.000
python scripts. This is particularly useful as part of an automation

3
00:00:12.000 --> 00:00:16.000
script, for example, you want your python program

4
00:00:16.000 --> 00:00:20.000
to run the ls command and capture the output.

5
00:00:20.000 --> 00:00:24.000
On Mac and Linux, this command lists the files and directories

6
00:00:24.000 --> 00:00:28.000
in the current directory. This is equivalent to the dir, or

7
00:00:28.000 --> 00:00:32.000
dir command on windows. So in this lecture you're going to learn how to run

8
00:00:32.000 --> 00:00:36.000
any of the operating system commands as well as external programs,

9
00:00:36.000 --> 00:00:40.000
for example, you can have your python script execute another

10
00:00:40.000 --> 00:00:44.000
python script. For that we need to run python 3, let's say

11
00:00:44.000 --> 00:00:48.000
other.py so let me show you how to achieve this.

12
00:00:48.000 --> 00:00:52.000
On the top, we import the sub process module.

13
00:00:52.000 --> 00:00:56.000
With this module we can spot a child process. A

14
00:00:56.000 --> 00:01:00.000
process is basically an instance of a running program. So with this

15
00:01:00.000 --> 00:01:04.000
module, we can run other programs. Now in this module

16
00:01:04.000 --> 00:01:08.000
we have a bunch of functions or methods like call, check,

17
00:01:08.000 --> 00:01:12.000
call check output, and so on. All

18
00:01:12.000 --> 00:01:16.000
these methods are helper methods to create an instance

19
00:01:16.000 --> 00:01:20.000
of the p open class process

20
00:01:20.000 --> 00:01:24.000
open. Now, these methods have been around for a long time, and

21
00:01:24.000 --> 00:01:28.000
they're kind of considered legacy, there is a newer method, and that is

22
00:01:28.000 --> 00:01:32.000
the preferred approach, to create an instance of the p open class.

23
00:01:32.000 --> 00:01:36.000
That method is called run.

24
00:01:36.000 --> 00:01:40.000
So if you look at other tutorials or courses, and they talk about these methods

25
00:01:40.000 --> 00:01:44.000
remember there is a better approach, so don't waste your time on these methods.

26
00:01:44.000 --> 00:01:48.000
Now let's see how we can use the run method to run an external

27
00:01:48.000 --> 00:01:52.000
program. The first argument to this method is an array of strings.

28
00:01:52.000 --> 00:01:56.000
Here is an example, lets say you want to run the ls

29
00:01:56.000 --> 00:02:00.000
command. So we add that here. Now, if you want to supply any arguments

30
00:02:00.000 --> 00:02:04.000
to this command we add them as items in this array.

31
00:02:04.000 --> 00:02:08.000
So, let's say ls -l, which gives us a detailed view of the

32
00:02:08.000 --> 00:02:12.000
files and directories in the current directory. Let me show you.

33
00:02:12.000 --> 00:02:16.000
So ls -l here's what we get

34
00:02:16.000 --> 00:02:20.000
we get the name of the file, it's creation date, size, owner,

35
00:02:20.000 --> 00:02:24.000
and so on. So, let's save the changes,

36
00:02:24.000 --> 00:02:28.000
run this program, as you can see our program,

37
00:02:28.000 --> 00:02:32.000
executed ls - l command and this is the output

38
00:02:32.000 --> 00:02:36.000
printed on the terminal window. Now let's look at the

39
00:02:36.000 --> 00:02:40.000
return value of this method. So, let's call it result

40
00:02:40.000 --> 00:02:44.000
and print it's type. Run the program.

41
00:02:44.000 --> 00:02:48.000
again, so what we get is an instance of this class.

42
00:02:48.000 --> 00:02:52.000
Subprocess the completed process. So let's rename

43
00:02:52.000 --> 00:02:56.000
this variable to completed.

44
00:02:56.000 --> 00:03:00.000
Okay, now look at the attributes of this object.

45
00:03:00.000 --> 00:03:04.000
We have args, return code,

46
00:03:04.000 --> 00:03:08.000
standard derr and standard output. Let's inspect each of these outputs.

47
00:03:08.000 --> 00:03:12.000
So I'm going to print this also

48
00:03:12.000 --> 00:03:16.000
for clarity I'll learn to add a label, after that,

49
00:03:16.000 --> 00:03:20.000
let's print return code, and change the

50
00:03:20.000 --> 00:03:24.000
label accordingly, next let's print standard

51
00:03:24.000 --> 00:03:28.000
error, standard error, and finally

52
00:03:28.000 --> 00:03:32.000
standard output. So std

53
00:03:32.000 --> 00:03:36.000
out. Let's run the program and see what we get.

54
00:03:36.000 --> 00:03:40.000
So args is an array that includes the command that we execute.

55
00:03:40.000 --> 00:03:44.000
Return code is zero, which means success, any

56
00:03:44.000 --> 00:03:48.000
secure values indicates an error. Now in this case because we don't have any

57
00:03:48.000 --> 00:03:52.000
errors, standard error is none, otherwise we'd have an error message

58
00:03:52.000 --> 00:03:56.000
here, and standard output is also none because

59
00:03:56.000 --> 00:04:00.000
you're not capturing the output, the output is automatically printed on the terminal

60
00:04:00.000 --> 00:04:04.000
window. Sometimes we want to read the output of another window and do something

61
00:04:04.000 --> 00:04:08.000
with it. Perhaps we want to save it to a file. So let me show you how to do

62
00:04:08.000 --> 00:04:12.000
that. This run method takes quite a few keyword arguments and all of these

63
00:04:12.000 --> 00:04:16.000
have default values, the one we're going to use now is

64
00:04:16.000 --> 00:04:20.000
capture output. If we set this to true,

65
00:04:20.000 --> 00:04:24.000
when we run this program the output will not be printed on the terminal,

66
00:04:24.000 --> 00:04:28.000
it will be available in this attribute. Standard output.

67
00:04:28.000 --> 00:04:32.000
Let's take a look, save the changes, I'm going to comment out this line.

68
00:04:32.000 --> 00:04:36.000
And run the program, so look, we don't see the

69
00:04:36.000 --> 00:04:40.000
list of files and directories here. The output is available

70
00:04:40.000 --> 00:04:44.000
in this attribute, so let's print that and see what we get.

71
00:04:44.000 --> 00:04:48.000
There you go. Now note that this

72
00:04:48.000 --> 00:04:52.000
string is prefixed wit b, which represents

73
00:04:52.000 --> 00:04:56.000
a binary object, to convert this space string we need to pass

74
00:04:56.000 --> 00:05:00.000
another argument to the run method, so I'm going to break this down into multiple

75
00:05:00.000 --> 00:05:04.000
lines for clarity, lets add

76
00:05:04.000 --> 00:05:08.000
text to true. Now when we run this program,

77
00:05:08.000 --> 00:05:12.000
we no longer see a b prefix so,

78
00:05:12.000 --> 00:05:16.000
here we have a regular string object. Now we can print this on the screen terminal

79
00:05:16.000 --> 00:05:20.000
window, or save it to a file. As another example,

80
00:05:20.000 --> 00:05:24.000
here, let's run another python script. So I'm going to create

81
00:05:24.000 --> 00:05:28.000
a separate file here, let's call that other .

82
00:05:28.000 --> 00:05:32.000
py let's say this is a complicated python script

83
00:05:32.000 --> 00:05:36.000
that we want to call as part of running our main script. So,

84
00:05:36.000 --> 00:05:40.000
for now let's just print here is a complicated

85
00:05:40.000 --> 00:05:44.000
script. Now back to app.py,

86
00:05:44.000 --> 00:05:48.000
we can simply run this script as a child process. So,

87
00:05:48.000 --> 00:05:52.000
instead of ls you want to execute python or python 3,

88
00:05:52.000 --> 00:05:56.000
and as the argument, we pass other

89
00:05:56.000 --> 00:06:00.000
.py. Save the changes, run the program

90
00:06:00.000 --> 00:06:04.000
so as you see the other script is executed and here

91
00:06:04.000 --> 00:06:08.000
is the output that we captured. Now note that here I'm executing

92
00:06:08.000 --> 00:06:12.000
this other python script as a child process, so it's going to be a

93
00:06:12.000 --> 00:06:16.000
completely different memory space. This is different from importing that script

94
00:06:16.000 --> 00:06:20.000
and executing it here. So these two scripts will be two different processes

95
00:06:20.000 --> 00:06:24.000
and they will not share the same variables. So this is the basics of

96
00:06:24.000 --> 00:06:28.000
running child processes. And one last thing before we finish this lecture.

97
00:06:28.000 --> 00:06:32.000
Earlier I told you that any non zero return code indicates

98
00:06:32.000 --> 00:06:36.000
an error. So let's take a look at a real example.

99
00:06:36.000 --> 00:06:40.000
We have this command called false, I'm not entirely sure if this

100
00:06:40.000 --> 00:06:44.000
is available on windows or not, but if you're a windows user and this doesn't work on your machine

101
00:06:44.000 --> 00:06:48.000
please bare with me. So lets run this program, and see what happens.

102
00:06:48.000 --> 00:06:52.000
As you see, our return code is 1, because this

103
00:06:52.000 --> 00:06:56.000
false program always exits with 1 as the return code to indicate

104
00:06:56.000 --> 00:07:00.000
an error. Now, it's our job to check for this error, so

105
00:07:00.000 --> 00:07:04.000
1 way it to check if completed

106
00:07:04.000 --> 00:07:08.000
.returncode is not zero, then

107
00:07:08.000 --> 00:07:12.000
perhaps we want to print completed.

108
00:07:12.000 --> 00:07:16.000
standard error. The other approach is

109
00:07:16.000 --> 00:07:20.000
to pass another keyword argument here, check

110
00:07:20.000 --> 00:07:24.000
we set this to true. When we do that, if there is an error,

111
00:07:24.000 --> 00:07:28.000
this method will automatically raise an exception. Let's take a

112
00:07:28.000 --> 00:07:32.000
look. So, I'm going to run this program one more time, as you can see we have

113
00:07:32.000 --> 00:07:36.000
an exception of type called process error. And this class is defined

114
00:07:36.000 --> 00:07:40.000
in the sub process module. With this change we don't have to

115
00:07:40.000 --> 00:07:44.000
check for errors like this, so we can wrap this code in a

116
00:07:44.000 --> 00:07:48.000
try block and then

117
00:07:48.000 --> 00:07:52.000
add the except clause. Except when we want to capture

118
00:07:52.000 --> 00:07:56.000
the subprocess.call.process error, you can get the

119
00:07:56.000 --> 00:08:00.000
exception in this object, and then simply print it on the terminal.

120
00:08:00.000 --> 00:08:04.000
So this is all about running external programs in your python script.
