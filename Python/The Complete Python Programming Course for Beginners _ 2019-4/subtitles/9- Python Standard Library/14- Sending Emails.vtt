WEBVTT

1
00:00:04.000 --> 00:00:08.000
In this tutorial you're going to learn how to send emails in python, this is

2
00:00:08.000 --> 00:00:12.000
particularly useful if you have a database of customers and you want to send them

3
00:00:12.000 --> 00:00:16.000
various emails based on their interests, so let me show you how to send

4
00:00:16.000 --> 00:00:20.000
emails in python, basically we need to import a couple of classes

5
00:00:20.000 --> 00:00:24.000
1 to create email messages, and the other to connect with an

6
00:00:24.000 --> 00:00:28.000
map server for sending emails. So from

7
00:00:28.000 --> 00:00:32.000
email.mime.multipart.

8
00:00:32.000 --> 00:00:36.000
We should import the mime multipart class.

9
00:00:36.000 --> 00:00:40.000
What is going on here? So basically we have this email package

10
00:00:40.000 --> 00:00:44.000
in python standard library, in this package we have a sub package called

11
00:00:44.000 --> 00:00:48.000
mime. Mime stands for multipurpose internet mail

12
00:00:48.000 --> 00:00:52.000
extensions. And this is the standard that defines the format for email messages.

13
00:00:52.000 --> 00:00:56.000
This has nothing to do with python, it's purely a standard for defining the format

14
00:00:56.000 --> 00:01:00.000
of emails. In this package we have another

15
00:01:00.000 --> 00:01:04.000
sub package that is multi part that exposes a class called

16
00:01:04.000 --> 00:01:08.000
mime multipart. With this object, we can send

17
00:01:08.000 --> 00:01:12.000
the email message that includes both html and plain text

18
00:01:12.000 --> 00:01:16.000
content. So when the email client of the receiver receives this email message

19
00:01:16.000 --> 00:01:20.000
if it supports html it will render the html content

20
00:01:20.000 --> 00:01:24.000
otherwise it will render plain text content. So

21
00:01:24.000 --> 00:01:28.000
Now, lets go ahead and create the mime multi part

22
00:01:28.000 --> 00:01:32.000
object. So Mime multipart, we store it here,

23
00:01:32.000 --> 00:01:36.000
in message, now we need to set

24
00:01:36.000 --> 00:01:40.000
various headers, so message we use the square brackets to set

25
00:01:40.000 --> 00:01:44.000
from, I'm going to set that to Mosh Hamedani.

26
00:01:44.000 --> 00:01:48.000
Similarly, we set to,

27
00:01:48.000 --> 00:01:52.000
let's send that to test user at code with mosh,

28
00:01:52.000 --> 00:01:56.000
.com, next we need to set the

29
00:01:56.000 --> 00:02:00.000
subject so let's say this is a test.

30
00:02:00.000 --> 00:02:04.000
So these are various headers supported by mime

31
00:02:04.000 --> 00:02:08.000
multi part objects, but we don't have a header called body. So to set

32
00:02:08.000 --> 00:02:12.000
the body, we need to attach it to this message. So this message object

33
00:02:12.000 --> 00:02:16.000
has a method called attach that gets a

34
00:02:16.000 --> 00:02:20.000
payload, this payload can read text, image, or other types supported by

35
00:02:20.000 --> 00:02:24.000
mime protocol. So, on the top,

36
00:02:24.000 --> 00:02:28.000
from email.mime.text module

37
00:02:28.000 --> 00:02:32.000
we need to import the mime text class.

38
00:02:32.000 --> 00:02:36.000
Now to set the body of this message, we need to create

39
00:02:36.000 --> 00:02:40.000
a mime text object, so mime text, and include our mime text

40
00:02:40.000 --> 00:02:44.000
here. So lets say body. Now by default

41
00:02:44.000 --> 00:02:48.000
we can see the value of the second parameter is set to plain, which refers to

42
00:02:48.000 --> 00:02:52.000
plain text. If you want to pass html content, you should set

43
00:02:52.000 --> 00:02:56.000
this to html, and pass an actual html text here,

44
00:02:56.000 --> 00:03:00.000
but I'm going to leave that to the next lecture, so for now, lets just send

45
00:03:00.000 --> 00:03:04.000
plain text content. So here we have a mail message object

46
00:03:04.000 --> 00:03:08.000
now we need to send this using an empty server, so on the

47
00:03:08.000 --> 00:03:12.000
top, let's import the smtplib module,

48
00:03:12.000 --> 00:03:16.000
this module has a class, called

49
00:03:16.000 --> 00:03:20.000
smtp, and here we need to pass two keyword arguments,

50
00:03:20.000 --> 00:03:24.000
first one is host, I'm going to set that to smtp

51
00:03:24.000 --> 00:03:28.000
.gmail.com and port to

52
00:03:28.000 --> 00:03:32.000
587. The values we set here depend

53
00:03:32.000 --> 00:03:36.000
on the smtp server we use. Now this returns an smtp object

54
00:03:36.000 --> 00:03:40.000
when we are done with it, we should make sure to

55
00:03:40.000 --> 00:03:44.000
close it, to release this resource, so I would prefer to use the with

56
00:03:44.000 --> 00:03:48.000
statement, and get that smtp object right here,

57
00:03:48.000 --> 00:03:52.000
Alright, now, there are a few

58
00:03:52.000 --> 00:03:56.000
steps that we need to follow before we send an email, first we need to call

59
00:03:56.000 --> 00:04:00.000
smtp. smtp.

60
00:04:00.000 --> 00:04:04.000
hello, well this is spelled differently but this is a hello message, or

61
00:04:04.000 --> 00:04:08.000
greeting to the smtp server, basically we're telling the smtp server hey

62
00:04:08.000 --> 00:04:12.000
I'm the client, I want to send an email, and this is part of

63
00:04:12.000 --> 00:04:16.000
the smtp protocol. So the communication between the client and an

64
00:04:16.000 --> 00:04:20.000
smtp server should start with the hello message. Next

65
00:04:20.000 --> 00:04:24.000
we need to call smtp.starttls. And

66
00:04:24.000 --> 00:04:28.000
this puts the smtp connection in tls mode. tls

67
00:04:28.000 --> 00:04:32.000
stands for transport layer security, with this all the commands we set

68
00:04:32.000 --> 00:04:36.000
to the smtp server will be encrypted, now you're ready to login,

69
00:04:36.000 --> 00:04:40.000
So, we call smtp.login,

70
00:04:40.000 --> 00:04:44.000
we pass our username and password here, so test user

71
00:04:44.000 --> 00:04:48.000
@codewithmosh.com and the

72
00:04:48.000 --> 00:04:52.000
password is today, sky is blue 1234,

73
00:04:52.000 --> 00:04:56.000
don't try this because I'm going to delete this email account after recording this video.

74
00:04:56.000 --> 00:05:00.000
Alright, and finally we call smtp

75
00:05:00.000 --> 00:05:04.000
.send message and pass our

76
00:05:04.000 --> 00:05:08.000
email message object, that's all we have to do. Now

77
00:05:08.000 --> 00:05:12.000
for confirmation let's print set.

78
00:05:12.000 --> 00:05:16.000
Save the changes, I'm going to go ahead and run this program

79
00:05:16.000 --> 00:05:20.000
so our email message was sent successfully, beautiful

80
00:05:20.000 --> 00:05:24.000
in a real world application, various things could go wrong so make sure to handle

81
00:05:24.000 --> 00:05:28.000
exceptions using a try block.Â Now here on

82
00:05:28.000 --> 00:05:32.000
my email client, you can see I got a message with the right subject,

83
00:05:32.000 --> 00:05:36.000
and body. Let's take this to the next level. I want to attach an

84
00:05:36.000 --> 00:05:40.000
image to this message. So here on line 9,

85
00:05:40.000 --> 00:05:44.000
just like how we attached text to this message, we can also attach image,

86
00:05:44.000 --> 00:05:48.000
on the top, from email.mime

87
00:05:48.000 --> 00:05:52.000
.image we need to import the mime

88
00:05:52.000 --> 00:05:56.000
image class. Now here in this directory I've put

89
00:05:56.000 --> 00:06:00.000
a picture of myself mosh.tmg so

90
00:06:00.000 --> 00:06:04.000
after line 10, I'm going to call

91
00:06:04.000 --> 00:06:08.000
message.

92
00:06:08.000 --> 00:06:12.000
message image object, here we need to pass our image data in binary.

93
00:06:12.000 --> 00:06:16.000
So we need to import our path class

94
00:06:16.000 --> 00:06:20.000
from path lib let's import

95
00:06:20.000 --> 00:06:24.000
path class.Â Now we create a path object

96
00:06:24.000 --> 00:06:28.000
and load mosh.png

97
00:06:28.000 --> 00:06:32.000
as you learned before this has method read bytes.

98
00:06:32.000 --> 00:06:36.000
So this returns all the data in the file in binary, now,

99
00:06:36.000 --> 00:06:40.000
we save the changes, send this one more time,

100
00:06:40.000 --> 00:06:44.000
okay, send, now back to my email client, you see I got a second

101
00:06:44.000 --> 00:06:48.000
message and here's a picture of me.
