1
00:00:00,840 --> 00:00:04,390
mhm. Yeah. there

2
00:00:04,390 --> 00:00:08,400
are times that we may want to
 repeat a task a number of times. For

3
00:00:08,400 --> 00:00:11,810
example. let's say we send
 a message to a user If

4
00:00:11,810 --> 00:00:15,470
that message cannot be delivered.
 Perhaps we want to retry three

5
00:00:15,470 --> 00:00:18,980
times now for simply severe. Let's imagine this

6
00:00:18,980 --> 00:00:22,460
print statement is equivalent to sending a

7
00:00:22,460 --> 00:00:25,950
message in the real World program.
 To send a message to

8
00:00:25,950 --> 00:00:29,240
a user. we have to write 5
 to 10 lines of code. Now. if

9
00:00:29,240 --> 00:00:32,740
you want to retry three times.
 we don't want to repeat all that code

10
00:00:32,750 --> 00:00:36,020
that is ugly. That's when
 we use a loop. We

11
00:00:36,020 --> 00:00:39,340
use loops to create repetition. So here's

12
00:00:39,340 --> 00:00:43,160
how it works. We start with four number

13
00:00:43,540 --> 00:00:47,470
in. We have a built
 in function called range. Now

14
00:00:47,470 --> 00:00:51,050
. how many times we want to
 repeat this task. Let's say three times

15
00:00:51,540 --> 00:00:55,650
. So we call range and
 past three as an argument now

16
00:00:55,650 --> 00:00:58,870
similar to our if statements.
 we need to terminate this

17
00:00:58,870 --> 00:01:03,010
line with a colon enter. we get invitation

18
00:01:03,020 --> 00:01:06,530
. So in this block we
 can write all the statements that

19
00:01:06,530 --> 00:01:10,660
should be repeated three times.
 Let's do a print a

20
00:01:10,660 --> 00:01:14,420
message like attempt. save the changes. run

21
00:01:14,420 --> 00:01:18,560
the program. So we have
 attempt printed three times. Beautiful

22
00:01:19,040 --> 00:01:22,770
. Now what is this number.
 Let's take a look. It's

23
00:01:22,770 --> 00:01:26,110
a variable of type integer. so let's

24
00:01:26,110 --> 00:01:30,360
pass it as the second
 argument to the print function number

25
00:01:31,140 --> 00:01:36,300
. Run the program.
 This is what we get. 012 So

26
00:01:36,300 --> 00:01:40,000
here we have a for loop.
 This for loop is executed three

27
00:01:40,000 --> 00:01:43,360
times in each iteration number will have

28
00:01:43,370 --> 00:01:47,150
a different value. Initially. it will be zero.
 In the second iteration

29
00:01:47,150 --> 00:01:50,560
. it will be one. And finally.
 in the last iteration. it will be too

30
00:01:51,240 --> 00:01:55,730
. Now. here we can do something fun.
 We can add one

31
00:01:55,730 --> 00:01:59,340
to this around the
 program and now the messages

32
00:01:59,340 --> 00:02:03,060
that the prints are kind of
 more meaningful or more user friendly

33
00:02:03,070 --> 00:02:07,120
. like attempting number one attempting
 number two and so on. We

34
00:02:07,120 --> 00:02:11,430
can take this to the next level
 so we can pass another argument here

35
00:02:11,430 --> 00:02:15,720
. I'm going to add an expression
 one more time number plus one. So

36
00:02:15,720 --> 00:02:19,050
we'll get 123 Now I want to put this expression in

37
00:02:19,050 --> 00:02:22,980
parenthesis. So let's select this. put

38
00:02:22,980 --> 00:02:26,710
it in parenthesis. and then multiply it by

39
00:02:26,720 --> 00:02:30,200
a dot. So here
 we have a string that

40
00:02:30,200 --> 00:02:33,890
is multiplied by a number.
 The result will be that string

41
00:02:33,890 --> 00:02:37,630
repeated that number of times.
 Let's take a look. So

42
00:02:37,640 --> 00:02:41,120
around the program. see. that's pretty cool. isn't

43
00:02:41,120 --> 00:02:44,400
it. Now. let me show you
 one more thing before we finish this

44
00:02:44,400 --> 00:02:48,330
lecture. As you saw.
 this range function generates numbers

45
00:02:48,340 --> 00:02:51,640
starting from zero all the way
 up to this number here. But

46
00:02:51,640 --> 00:02:55,730
it doesn't include this number here.
 We can pass another argument

47
00:02:55,740 --> 00:02:59,660
. say start from
 one and finish before four

48
00:03:00,540 --> 00:03:04,260
. With this change. we don't need
 to add one to number every time

49
00:03:04,640 --> 00:03:07,980
because in the first iteration.
 this number variable will be set to

50
00:03:07,980 --> 00:03:11,170
one so we can simplify
 our code and make it

51
00:03:11,170 --> 00:03:14,490
cleaner. Let's run it
 one more time. We get

52
00:03:14,490 --> 00:03:18,140
the exact same result. We can also pass

53
00:03:18,150 --> 00:03:21,400
a third argument as a step.
 So I'm going to change the

54
00:03:21,400 --> 00:03:24,790
second argument to 10 and passed to

55
00:03:24,790 --> 00:03:28,690
as a step. Look at the result. These

56
00:03:28,690 --> 00:03:32,150
are the numbers we get
 135 and so on. So

