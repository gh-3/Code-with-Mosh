2
00:00:04,290 --> 00:00:07,890
Now the last thing I want to discuss
 in this section is the concept of infinite

3
00:00:07,890 --> 00:00:11,860
loops. An infinite loop is
 a loop that runs forever

4
00:00:12,540 --> 00:00:15,780
. So if I change this condition too

5
00:00:15,780 --> 00:00:19,200
true. because true is always true. this

6
00:00:19,200 --> 00:00:22,600
wild loop will run forever.
 So to jump out

7
00:00:22,600 --> 00:00:25,870
of this. we need a break statement.
 So after we get the

8
00:00:25,880 --> 00:00:30,510
input from the user.
 we can get the command converted

9
00:00:30,510 --> 00:00:34,460
to lowercase and see
 if it equals to quit

10
00:00:35,040 --> 00:00:38,540
. If that's the case.
 we want to break now

11
00:00:38,540 --> 00:00:41,750
. With this change. we no
 longer need to initialize command to

12
00:00:41,750 --> 00:00:45,270
an empty string.
 Previously. we needed this because we

13
00:00:45,270 --> 00:00:49,450
had a wild statement
 like this while command does

14
00:00:49,450 --> 00:00:52,620
not equal quit. So we had to

15
00:00:52,620 --> 00:00:55,840
define this command variable.
 And that's why we have city to

16
00:00:55,840 --> 00:00:59,380
an empty string without this line. When Python

17
00:00:59,380 --> 00:01:03,030
interpreter tries to execute this code.
 it doesn't know what command

18
00:01:03,030 --> 00:01:06,730
is. So now that
 we have an infinite loop

19
00:01:06,740 --> 00:01:10,810
. we no longer need to define command
 and set it to an empty string. So

20
00:01:10,810 --> 00:01:14,060
. in terms of functionality.
 this program is exactly the same

21
00:01:14,060 --> 00:01:17,630
as the program we wrote in
 the last lecture just be aware of

22
00:01:17,630 --> 00:01:21,890
these infinite loops because they run forever.
 You should always

23
00:01:21,900 --> 00:01:25,480
have a way to jump
 out of them. Otherwise your program

24
00:01:25,480 --> 00:01:29,100
will run forever. And this
 can sometimes cause issues. because

25
00:01:29,100 --> 00:01:32,570
if you're executing operations that consume memory at

