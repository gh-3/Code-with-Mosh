2
00:00:04,000 --> 00:00:07,850
So you have learned how to use
 for loops to repeat one or more

3
00:00:07,850 --> 00:00:11,290
statements in your programs.
 Now let's dive deeper and

4
00:00:11,290 --> 00:00:15,520
see what this range function returns so earlier

5
00:00:15,520 --> 00:00:19,490
. you learn about the
 built in Thai function. With

6
00:00:19,490 --> 00:00:22,630
this function. we can get the
 type of an object. So if I

7
00:00:22,630 --> 00:00:26,360
pass five here and run this program

8
00:00:26,940 --> 00:00:31,050
. this is what we get. So the
 type of this number or this object is

9
00:00:31,090 --> 00:00:34,850
into or energy er.
 Now let's look at the type

10
00:00:35,440 --> 00:00:39,430
of the value that we get
 from the range function. So as

11
00:00:39,430 --> 00:00:43,900
an argument. we pass
 range of a number. Let's

12
00:00:43,900 --> 00:00:48,100
run this program so this range function returns

13
00:00:48,110 --> 00:00:51,310
an object of type range. So

14
00:00:51,310 --> 00:00:55,300
in python we have
 primitive types like numbers, strings

15
00:00:55,310 --> 00:00:59,250
and booleans. But we
 also have complex types. Range

16
00:00:59,260 --> 00:01:02,750
is an example of one of
 those complex types. Throughout this course

17
00:01:02,760 --> 00:01:06,870
you're going to learn about
 a lot of other complex types. Now

18
00:01:06,870 --> 00:01:10,330
what is interesting about
 this range object is that

19
00:01:10,340 --> 00:01:13,790
it's Iterable. which means we can iterate over

20
00:01:13,790 --> 00:01:16,990
it or use it in
 a for loop. That is

21
00:01:16,990 --> 00:01:21,770
why we can write code like this. So

22
00:01:21,770 --> 00:01:25,200
this range function returns a range object which

23
00:01:25,200 --> 00:01:28,630
is iterable which means
 we can iterate over it.

24
00:01:28,640 --> 00:01:32,250
In each iteration
 X will have a different value.

25
00:01:33,040 --> 00:01:36,410
.Now, range objects are not
 the only iterable objects in

26
00:01:36,410 --> 00:01:40,490
python. Strings are also Iterable.
 so here we

27
00:01:40,490 --> 00:01:44,160
can add a string like Python.

28
00:01:45,440 --> 00:01:49,490
Now, in each iteration
 X will hold one character in

29
00:01:49,490 --> 00:01:53,680
the string. Let me show
 you So print eggs. and

30
00:01:53,680 --> 00:01:57,530
I'm gonna delete these two lines here. Let's

31
00:01:57,530 --> 00:02:01,060
run this program so
 in each iteration will get

32
00:02:01,070 --> 00:02:04,440
one character and printed. We have

33
00:02:04,450 --> 00:02:07,800
another complex type called list, which we used

34
00:02:07,800 --> 00:02:11,390
to store a list of objects.
 so we add square

35
00:02:11,390 --> 00:02:14,710
brackets, This indicates a list.
 Now we can add

36
00:02:14,710 --> 00:02:18,250
a list of numbers or a list of strings
 like a list of names.

37
00:02:18,640 --> 00:02:22,410
You will learn about lists
 later in the course. so let's

38
00:02:22,410 --> 00:02:26,060
run this one more time.
 As you can see, we can iterate

39
00:02:26,060 --> 00:02:29,980
over lists. 
In each iteration we'll get one object

40
00:02:29,990 --> 00:02:33,310
in this list. 
Now, later in the course I will show

41
00:02:33,310 --> 00:02:36,650
you how to create your
 own custom objects that are

42
00:02:36,660 --> 00:02:40,150
iterable. For example you will learn
 how to write code like this

43
00:02:40,640 --> 00:02:44,960
four item in shopping cart

44
00:02:45,540 --> 00:02:48,740
print item. So shopping card is going

45
00:02:48,740 --> 00:02:51,880
to be a custom object that you will create.
 It's not going to be

46
00:02:51,880 --> 00:02:55,700
an integer or a string or Boolean.
 It's a custom object.

47
00:02:55,710 --> 00:02:59,530
It has a different structure
 and we'll make it iterable so

48
00:02:59,530 --> 00:03:03,000
we can use it in a for loop 
and in each iteration we can get one item in the shopping_cart and 
print it on the terminal. 

