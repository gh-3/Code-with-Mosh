1
00:00:03,340 --> 00:00:06,720
So here's an example
 from the last lecture. A

2
00:00:06,720 --> 00:00:10,980
person is eligible for a loan
 if they have high income on

3
00:00:11,000 --> 00:00:15,290
good credit on.
 but they're not a student now

4
00:00:15,290 --> 00:00:18,530
. One thing you need to know
 about this Boolean operators is that there

5
00:00:18,530 --> 00:00:22,170
are short circuit. What do I mean by that. Well

6
00:00:22,180 --> 00:00:25,800
. when Python interpreter
 wants to evaluate this expression

7
00:00:25,800 --> 00:00:29,280
. it starts from the first argument. If

8
00:00:29,280 --> 00:00:32,610
this is true. it continues
 the evaluation to see if

9
00:00:32,610 --> 00:00:35,730
the second argument is also true.
 So it continues the

10
00:00:35,730 --> 00:00:40,720
evaluation all the way to
 the end of this expression. However

11
00:00:40,730 --> 00:00:43,980
. as soon as one
 of these arguments is false. the

12
00:00:43,980 --> 00:00:47,340
evaluation stops. Let me show
 you what I mean. So if

13
00:00:47,340 --> 00:00:51,490
I change high income
 toe false when Python interpreter

14
00:00:51,500 --> 00:00:55,610
sees this expression. it starts here. It

15
00:00:55,610 --> 00:00:59,220
knows that high income is false.
 so it doesn't matter what comes

16
00:00:59,230 --> 00:01:03,130
after. The result of this entire expression will

17
00:01:03,140 --> 00:01:06,730
always be false. because at
 least one of the arguments or

18
00:01:06,730 --> 00:01:10,830
one of the. uh. prints is false.
 This is what we call short

19
00:01:10,830 --> 00:01:14,520
circuiting. Just like the short circuit concept.
 We have an electron

20
00:01:14,520 --> 00:01:17,820
ICS so the evaluation stops as soon as

21
00:01:17,820 --> 00:01:21,980
one of these arguments evaluates toe false. We

22
00:01:21,980 --> 00:01:25,320
have the same concept with
 the or operator. So if

23
00:01:25,320 --> 00:01:29,520
I change these and operators toe or let's

24
00:01:29,520 --> 00:01:32,780
see what happens with the or operator. we

25
00:01:32,780 --> 00:01:36,190
know that at least one of
 the arguments should be true. So

26
00:01:36,190 --> 00:01:39,570
the evaluation stops as soon
 as we find an argument that

27
00:01:39,570 --> 00:01:43,190
evaluates to true. In this case.
 when Python interpreter it

28
00:01:43,190 --> 00:01:47,010
values this expression.
 it seems that high income response

29
00:01:47,020 --> 00:01:51,040
. So it continues the evaluation.
 hoping that the next argument

30
00:01:51,050 --> 00:01:54,950
will be true here.
 Good credit is true. so

31
00:01:54,960 --> 00:01:59,120
evaluation stops and the
 result of this entire expression

32
00:01:59,130 --> 00:02:02,730
will be true. So in python, logical operators are short circuit.

