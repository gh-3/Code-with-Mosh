1
00:00:00,840 --> 00:00:04,270

2
00:00:04,000 --> 00:00:07,900
So here we have this course 
variable set to "Python programming". 

3
00:00:07,900 --> 00:00:11,520
As I told you before, whenever you 
work with texts you should surround 

4
00:00:11,520 --> 00:00:15,090
your text with quotes. 
You can either use double quotes or 

5
00:00:15,090 --> 00:00:18,200
single quotes. That's more of 
a personal preference, 

6
00:00:18,200 --> 00:00:21,000
but quite often we use double quotes. 

7
00:00:21,000 --> 00:00:26,500
We also have triple quotes and 
we use them to format a long string.

8
00:00:26,500 --> 00:00:29,130
For example if you have, let's say a

9
00:00:29,130 --> 00:00:32,350
variable message. That is the message we want

10
00:00:32,350 --> 00:00:35,000
to include in the body of an email. 

11
00:00:35,700 --> 00:00:39,000
You can use triple quotes to
format it like this. 

12
00:00:39,000 --> 00:00:44,700
Hi John, 
This is Mosh from codewithmosh.com 

13
00:00:44,700 --> 00:00:47,000
Blah blah blah 

14
00:00:47,000 --> 00:00:50,260
So that's when we use triple quotes. Now we

15
00:00:50,260 --> 00:00:53,780
don't need this in this lecture
So delete. Let

16
00:00:53,780 --> 00:00:57,340
me show you a few useful
things you can do with strings. First

17
00:00:57,340 --> 00:01:01,700
of all we have this
built in function in python for getting

18
00:01:01,700 --> 00:01:05,120
the length of strings.
What is the function? A

19
00:01:05,120 --> 00:01:08,450
function is basically a
 reusable piece of code that

20
00:01:08,450 --> 00:01:11,640
carries out a task. as a metaphor 
think of the

21
00:01:11,640 --> 00:01:15,190
remote control of your TV. on this remote control. You

22
00:01:15,190 --> 00:01:18,880
have buttons for different functions
like turn on, turn off,

23
00:01:18,890 --> 00:01:22,600
change the channel and so on.
These are the built in functions in

24
00:01:22,600 --> 00:01:26,490
your TV. in Python
and many other programming languages

25
00:01:26,490 --> 00:01:29,810
We have the exact same concept.
So we have functions that

26
00:01:29,810 --> 00:01:33,190
are built into the language
and the platform. You can reuse

27
00:01:33,190 --> 00:01:36,420
these functions to perform various tasks. So

28
00:01:36,420 --> 00:01:39,640
here we can use the
built in Len function to get

29
00:01:39,640 --> 00:01:42,910
the length of a string.
which means the number of characters in

30
00:01:42,910 --> 00:01:46,440
that string. 
Now, whenever you wanna use a function, you

31
00:01:46,440 --> 00:01:50,140
should use parenthesis. 
Now we say we're

32
00:01:50,140 --> 00:01:54,500
calling this function, which basically means 
we're using this function.

33
00:01:54,500 --> 00:01:57,630
Now some functions take additional data,

34
00:01:57,690 --> 00:02:01,240
which we refer to as arguments.
These arguments are

35
00:02:01,250 --> 00:02:04,680
input to these functions. so this

36
00:02:04,680 --> 00:02:08,320
len function takes an
input or an argument. Here

37
00:02:08,320 --> 00:02:12,130
we pass our course variable.
and this will return the

38
00:02:12,130 --> 00:02:15,790
number of characters in this string.
So let's print

39
00:02:15,790 --> 00:02:18,990
that and see what we get. Run the

40
00:02:18,990 --> 00:02:22,190
program. We get 18 because we

41
00:02:22,190 --> 00:02:25,450
have 18 characters here. Let's look

42
00:02:25,450 --> 00:02:28,560
at another example. If you
want to get access to a

43
00:02:28,560 --> 00:02:32,400
specific character in the string,
you use the square bracket

44
00:02:32,400 --> 00:02:35,880
notation. So here we add course square

45
00:02:35,880 --> 00:02:39,240
brackets to get the first character,
you use the

46
00:02:39,250 --> 00:02:42,720
index zero. So in python, like

47
00:02:42,720 --> 00:02:46,550
many other languages, strings are zero index;

48
00:02:46,560 --> 00:02:50,600
which means the index of
the first character or the first element

49
00:02:50,610 --> 00:02:56,500
is zero. So now
 when we print this we'll

50
00:02:56,500 --> 00:02:59,840
get P. Okay. Now

51
00:02:59,840 --> 00:03:04,060
you can also use
a negative index. Like minus

52
00:03:04,060 --> 00:03:07,540
one. What does that mean? Well if

53
00:03:07,540 --> 00:03:10,960
zero represents the first character here

54
00:03:11,340 --> 00:03:14,800
what do you think negative one represents? that

55
00:03:14,800 --> 00:03:18,640
takes us back to the end
of the string. So that returns the

56
00:03:18,640 --> 00:03:21,950
first character from the end
of the string. Let's run

57
00:03:21,950 --> 00:03:26,190
this program. You will see
you'll get g. There

58
00:03:26,190 --> 00:03:29,710
you go. Using a similar syntax, you

59
00:03:29,710 --> 00:03:33,250
can slice strings. let me show you. So

60
00:03:33,250 --> 00:03:36,850
I'm going to duplicate this
line and remove negative one.

61
00:03:37,340 --> 00:03:41,270
Now let's say we wanna
extract the first three characters in

62
00:03:41,270 --> 00:03:44,630
this string. So here
we need two indexes: the

63
00:03:44,630 --> 00:03:48,420
start Index colon(:) the end index. So

64
00:03:48,420 --> 00:03:51,770
this would returns a
new string that contains the

65
00:03:51,770 --> 00:03:55,600
first three characters in this course variable. That

66
00:03:55,600 --> 00:03:59,120
will be P y and t.
So the index of

67
00:03:59,120 --> 00:04:02,720
these characters are 0 1 and 2. So that

68
00:04:02,720 --> 00:04:06,850
means the character at the
end index is not included.

69
00:04:06,860 --> 00:04:10,220
Okay. let's run the
program and make sure we

70
00:04:10,220 --> 00:04:14,200
get the right result.
There you go. Pyt. Now

71
00:04:14,200 --> 00:04:17,800
what if we don't include the end index?


72
00:04:17,800 --> 00:04:21,240
What do you think we're gonna get?
It's common sense. We

73
00:04:21,240 --> 00:04:24,510
start from Index zero and
go all the way to

74
00:04:24,510 --> 00:04:27,690
the end of the string.
So this will return a new string. That

75
00:04:27,690 --> 00:04:31,710
is exactly the same
as the original string. Let's

76
00:04:31,710 --> 00:04:37,300
take a look. So we get python programming.

77
00:04:37,300 --> 00:04:38,910
now. What if we don't include

78
00:04:38,910 --> 00:04:42,700
the start index
but include the end index? 

79
00:04:42,700 --> 00:04:46,410
What do you think we're gonna get? 
once again it's common sense.

80
00:04:46,420 --> 00:04:49,590
So by default
python will put zero here. so it

81
00:04:49,590 --> 00:04:52,760
will start from the beginning of the string.
So when I run this

82
00:04:52,760 --> 00:04:56,470
program we should get Pyt one more time. There

83
00:04:56,470 --> 00:04:59,740
you go. And finally, as the last

84
00:04:59,740 --> 00:05:03,110
example, If we don't include the start and

85
00:05:03,110 --> 00:05:06,650
the end index this will
return a copy of the original

86
00:05:06,650 --> 00:05:09,960
string. Let's look at this. So we

87
00:05:09,960 --> 00:05:13,310
get Python Programming. Now

88
00:05:13,310 --> 00:05:16,640
you don't have to memorize
any of these. Just remember we

89
00:05:16,640 --> 00:05:19,940
use the len function to get
the length of a string. We use

90
00:05:19,940 --> 00:05:23,460
bracket notation to get access
to a specific element or

91
00:05:23,460 --> 00:05:27,050
a specific character.
and we use this notation to slice a string

