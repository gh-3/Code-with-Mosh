1
00:00:00,840 --> 00:00:04,300
mhm. Yeah. There

2
00:00:04,300 --> 00:00:07,660
are times that you may want to
 get individual items in a list and

3
00:00:07,660 --> 00:00:11,010
assign them to different variables.
 Here is an example. We

4
00:00:11,010 --> 00:00:14,480
can define a variable like
 first and set it to numbers

5
00:00:14,480 --> 00:00:18,260
of zero. Similarly. we can define second. set

6
00:00:18,260 --> 00:00:22,450
it to numbers of one and
 third set it to numbers of

7
00:00:22,460 --> 00:00:25,770
two. Perhaps you're going
 to use these variables in

8
00:00:25,770 --> 00:00:28,940
a few complex expressions
 in your code. Now there

9
00:00:28,940 --> 00:00:32,390
is a cleaner and more
 elegant way to achieve the

10
00:00:32,390 --> 00:00:36,560
same result. And that is
 what we call list unpacking

11
00:00:36,940 --> 00:00:41,200
so we can unpack
 this list into multiple variables

12
00:00:41,210 --> 00:00:45,060
. Let me show you how that works.
 So we define our variables

13
00:00:45,060 --> 00:00:48,280
like 1st. 2nd and 3rd and then

14
00:00:48,280 --> 00:00:51,560
set them to our list.
 What we have on

15
00:00:51,560 --> 00:00:54,850
line two is exactly identical to what

16
00:00:54,850 --> 00:00:58,830
we have on lines 4 to 6.
 This is what we call lest

17
00:00:58,840 --> 00:01:02,320
unpacking. Now. What is important here is

18
00:01:02,320 --> 00:01:05,450
that the number of variables that we
 have on the left side of the

19
00:01:05,450 --> 00:01:08,900
assignment operator should be equal
 to the number of items we

20
00:01:08,900 --> 00:01:12,770
have in the list.
 So if we exclude third

21
00:01:12,770 --> 00:01:16,380
year and run this program. we will get

22
00:01:16,390 --> 00:01:20,130
an error value error. Too many values to

23
00:01:20,140 --> 00:01:23,710
unpack. So there are too
 many items in this list and

24
00:01:23,710 --> 00:01:27,660
we cannot unpack it into enough variables

25
00:01:28,640 --> 00:01:32,090
. Now what if in this list
 we have so many items. but we

26
00:01:32,100 --> 00:01:36,080
only care about the first two.
 We don't want to define so

27
00:01:36,080 --> 00:01:40,280
many variables on the left
 side of the assignment operator. Well

28
00:01:40,360 --> 00:01:44,010
. we can get the 1st
 and 2nd and then pack the

29
00:01:44,010 --> 00:01:48,060
rest inside of a separate list called Other

30
00:01:48,740 --> 00:01:52,170
. With This syntax will
 get the 1st and 2nd

31
00:01:52,170 --> 00:01:56,060
items and everything else will
 be stored in a separate list

32
00:01:56,070 --> 00:02:00,030
called other Let me show You.
 So let's print first and

33
00:02:00,030 --> 00:02:03,300
let's also print other. No. we

34
00:02:03,300 --> 00:02:07,540
don't need these few lines here.
 Let's run this code. So

35
00:02:07,550 --> 00:02:10,700
first is one and other is a

36
00:02:10,700 --> 00:02:14,230
list of all the items after the second

37
00:02:14,230 --> 00:02:18,160
item. That is the
 list I'm talking about. So

38
00:02:18,160 --> 00:02:21,760
in this example
 we have both unpacking and packing.

39
00:02:22,440 --> 00:02:26,120
First we try to
 unpack this numbers list into

40
00:02:26,120 --> 00:02:29,900
the variables on the left
 side of the assignment operator. and

41
00:02:29,900 --> 00:02:33,930
then because we have used
 an asterisk air. we're basically packing

42
00:02:34,070 --> 00:02:37,460
all the other items into a separate list

43
00:02:37,940 --> 00:02:41,640
now to refresh your memory.
 Earlier. we used this same tax

44
00:02:41,650 --> 00:02:46,010
when defining a function with
 a variable number of arguments. Remember

45
00:02:46,020 --> 00:02:50,330
. we had a
 function like this multiply with

46
00:02:50,330 --> 00:02:54,270
a parameter called asterisk numbers. and

47
00:02:54,270 --> 00:02:58,170
then we could call this multiply with

48
00:02:58,180 --> 00:03:02,160
arbitrary number of arguments.
 So when we prefix a

49
00:03:02,160 --> 00:03:05,660
parameter with an asterisk, Python would get all

50
00:03:05,660 --> 00:03:09,250
these arbitrary argument and
 packed them into a list.

51
00:03:09,260 --> 00:03:13,320
This is exactly what
 is happening on line two. Now

52
00:03:13,320 --> 00:03:16,970
let me delay it this other stuff. Now

53
00:03:16,970 --> 00:03:20,500
let's change this example a little bit.
 What if we care only about

54
00:03:20,500 --> 00:03:23,730
the first and the last item? Well. we

55
00:03:23,730 --> 00:03:26,850
can put other in between.
 so we get the

56
00:03:26,850 --> 00:03:30,450
first other and then the last item

57
00:03:30,940 --> 00:03:35,070
. So let's change the
 last item to nine and

58
00:03:35,070 --> 00:03:39,630
then print first. last and

59
00:03:39,650 --> 00:03:43,310
other. This is what we get.
 So first there's one. Last

60
00:03:43,310 --> 00:03:46,570
is nine and the rest is here. 
So this is all about list unpacking.

