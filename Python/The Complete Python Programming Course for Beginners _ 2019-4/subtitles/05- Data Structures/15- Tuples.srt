2
00:00:04,000 --> 00:00:07,840
Throughout the course 
I've mentioned tuples a few times. 
In this lecture We're

3
00:00:07,840 --> 00:00:11,560
going to take a closer look at them. 
A topple is basically a

4
00:00:11,560 --> 00:00:15,000
read only list. 
We can use it to contain a sequence of

5
00:00:15,000 --> 00:00:18,580
objects. but we cannot modify this sequence.
 We cannot add

6
00:00:18,580 --> 00:00:21,710
a new object to it.
 We cannot remove an existing object and we

7
00:00:21,710 --> 00:00:24,950
cannot modify an existing object.
 So let's start by

8
00:00:24,950 --> 00:00:29,040
defining a topple called point instead

9
00:00:29,040 --> 00:00:32,660
of square brackets. We use
 parenthesis to define a topple

10
00:00:33,040 --> 00:00:36,470
. So here we add
 a couple of numbers here. a

11
00:00:36,470 --> 00:00:39,720
point with X and Y values. We can

12
00:00:39,730 --> 00:00:43,250
also exclude parenthesis and python will

13
00:00:43,250 --> 00:00:47,450
see this as a topple.
 Let me show you. So let's print type

14
00:00:47,460 --> 00:00:50,700
of point and run
 this program so you can

15
00:00:50,700 --> 00:00:53,860
see it's a class of topple. 
Now, if

16
00:00:53,860 --> 00:00:58,070
you have one item,
 you should add a trailing comma, oherwise

17
00:00:58,080 --> 00:01:01,370
python thinks you're defining an integer.
 so if you

18
00:01:01,370 --> 00:01:05,420
run this code. you can
 see Point is an integer. But

19
00:01:05,430 --> 00:01:10,080
if we add a training comma here. python

20
00:01:10,090 --> 00:01:13,260
treats this as a top on.
 Also. if you want to

21
00:01:13,260 --> 00:01:17,140
define an empty topple. you should use empty

22
00:01:17,140 --> 00:01:20,910
parenthesis. So let's find this one more time.
 You can see Point

23
00:01:20,920 --> 00:01:24,660
is still a topple
 now similar to lists we

24
00:01:24,660 --> 00:01:28,190
can concatenate two topples. So here

25
00:01:28,190 --> 00:01:32,460
we have one topple.
 We can concatenate it with another topple

26
00:01:32,840 --> 00:01:37,280
. Let's print the result. So

27
00:01:37,280 --> 00:01:41,080
now we have this topple
 with numbers 1 to 4. We

28
00:01:41,080 --> 00:01:44,630
can also use the multiplication operator to repeat

29
00:01:44,630 --> 00:01:47,860
a tuple. 
So now when we run this code, we have a

30
00:01:47,860 --> 00:01:51,310
tuple with 1 2 1 2 and 1 2. 
These

31
00:01:51,310 --> 00:01:54,510
are different ways to create a tuple. 
We can

32
00:01:54,510 --> 00:01:58,360
also convert a list to tuple.
 So let's say we have a

33
00:01:58,360 --> 00:02:02,700
list of two numbers to
 convert this list to topple. Recall

34
00:02:02,720 --> 00:02:06,200
the Topple function.
 As you can see, this function

35
00:02:06,200 --> 00:02:09,470
takes an iterable so we can pass
 any iterables 

36
00:02:09,470 --> 00:02:13,100
here and this function will
 return a tuple. So here's

37
00:02:13,100 --> 00:02:16,790
one example. let's print point. Now we have

38
00:02:16,800 --> 00:02:20,450
a tuple of two numbers.
 Or we can pass a string

39
00:02:20,940 --> 00:02:24,930
like Hello World and
 because strings are iterable now

40
00:02:24,930 --> 00:02:28,810
we get tuple of 11 strings. Now

41
00:02:28,810 --> 00:02:32,570
let me revert this back
 to a simple topple similar

42
00:02:32,570 --> 00:02:37,010
to lists. We can access
 individual items using an index so

43
00:02:37,010 --> 00:02:40,150
we can get the first item.
 which is one. Or we

44
00:02:40,150 --> 00:02:43,530
can get a range of items
 like items from index zero to

45
00:02:43,530 --> 00:02:47,000
index to. This returns another topple with

46
00:02:47,010 --> 00:02:50,620
only those objects. We can also unpack

47
00:02:50,620 --> 00:02:54,440
these tuples so we can
 define three variables like x, y

48
00:02:54,440 --> 00:02:57,900
and z and set
 it to point. 
 Similar to

49
00:02:57,900 --> 00:03:01,710
lists, We can use the in
 operator to check for the existence of

50
00:03:01,710 --> 00:03:05,050
an item. So if 10 is

51
00:03:05,060 --> 00:03:10,190
in point. then we print exists. But

52
00:03:10,200 --> 00:03:13,450
as I told you.
 these topples are immutable. We

53
00:03:13,450 --> 00:03:16,850
cannot mutate them. We cannot change them.
 So if I try to

54
00:03:16,850 --> 00:03:20,100
modify point of zero and
 set it to a new

55
00:03:20,100 --> 00:03:23,590
number look. we immediately get this

56
00:03:23,600 --> 00:03:26,980
red underline and if we
 run the code. we get

57
00:03:26,980 --> 00:03:30,530
this type error topple
 object does not support item

58
00:03:30,530 --> 00:03:34,150
assignment for this very
 reason on like lists. we

59
00:03:34,150 --> 00:03:37,310
don't have methods to add
 a new object or remove an

60
00:03:37,310 --> 00:03:40,650
existing object. So you might
 ask where in the real

61
00:03:40,650 --> 00:03:44,730
world we use topples.
 Here's a basic rule of thumb. Let's

62
00:03:44,730 --> 00:03:48,230
say you're dealing with a sequence of
 object and you want to make sure

63
00:03:48,230 --> 00:03:51,450
that you don't accidentally modify this sequence. You

64
00:03:51,450 --> 00:03:55,150
don't accidentally add a new object
 to it or remove an existing object

65
00:03:55,540 --> 00:03:59,400
so instead of a list you
 can use a topple to prevent these accidental errors.

