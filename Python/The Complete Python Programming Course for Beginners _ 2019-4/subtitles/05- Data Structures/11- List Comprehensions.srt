2
00:00:04,000 --> 00:00:08,490
So here's the usage of map and filter
 functions that you just learn about. These

3
00:00:08,490 --> 00:00:11,910
two functions are pretty useful in python.
 and they are often used

4
00:00:11,910 --> 00:00:15,930
by developers who come from
 a functional programming background. So

5
00:00:15,930 --> 00:00:19,540
the concept of mapping and
 filtering lists is very natural

6
00:00:19,540 --> 00:00:23,080
to them. But in Python
 we have another feature for

7
00:00:23,080 --> 00:00:26,280
achieving the same result. And as
 far as I know. we don't have

8
00:00:26,280 --> 00:00:30,450
this feature in other programming languages.
 That is called comprehension

9
00:00:30,840 --> 00:00:33,970
. So let me show you
 how that works. Here is the

10
00:00:33,970 --> 00:00:37,210
basic syntax: 
We add our square brackets for

11
00:00:37,210 --> 00:00:40,920
defining a list. And here
 we'll write a comprehension expression

12
00:00:40,920 --> 00:00:44,660
like this expression for items

13
00:00:44,970 --> 00:00:48,460
in items. Well. this part

14
00:00:48,470 --> 00:00:51,910
is very familiar to you.
 right. It's like a for loop. So

15
00:00:51,910 --> 00:00:56,260
we're iterating over and iterable and then applying

16
00:00:56,450 --> 00:01:00,350
this expression on each item.
 In this example. if

17
00:01:00,350 --> 00:01:03,580
you want to get the price of each item.
 we can write an expression like

18
00:01:03,580 --> 00:01:06,880
this item of one. So this

19
00:01:06,880 --> 00:01:10,590
is what we call a list comprehension.
 and it produces the

20
00:01:10,600 --> 00:01:14,070
exact same result as what we have on

21
00:01:14,070 --> 00:01:17,330
line seven. So let's store the result in

22
00:01:17,330 --> 00:01:21,050
prices as you can see
 this coat is shorter and cleaner

23
00:01:21,100 --> 00:01:24,550
. We don't have all
 these parenthesis and colon. In

24
00:01:24,550 --> 00:01:27,960
my opinion. what we have online
 seven is a little bit ugly and

25
00:01:27,960 --> 00:01:31,630
noisy now. Some developers might
 disagree with me; 
 but generally

26
00:01:31,630 --> 00:01:34,840
speaking in the Python community,
 the preferred way to

27
00:01:34,840 --> 00:01:38,760
map and filter lists is
 to use a list comprehension.

28
00:01:39,240 --> 00:01:42,960
But I wanted to include the
 map and filter functions in this course because

29
00:01:42,960 --> 00:01:46,290
. as you look at the
 code written by others will probably come

30
00:01:46,290 --> 00:01:50,150
across instances of using
 the map and filter functions

31
00:01:50,160 --> 00:01:53,560
. So I wanted to make sure
 that you really understand how they work. But

32
00:01:53,570 --> 00:01:57,060
as a best practice. my recommendation
 to you is to use a list

33
00:01:57,060 --> 00:02:01,460
. Comprehension is because they are
 cleaner and also more performant. So

34
00:02:01,840 --> 00:02:05,160
this is how we can use a
 list comprehension to map a list into

35
00:02:05,160 --> 00:02:08,270
a different kind of list.
 Now. as part of this mapping. we

36
00:02:08,270 --> 00:02:11,510
can also filter items.
 So if I want to

37
00:02:11,510 --> 00:02:15,370
rewrite what we have online 10.
 Using a list comprehension

38
00:02:15,370 --> 00:02:18,560
that would look like this filtered.
 we set it

39
00:02:18,560 --> 00:02:22,050
to square brackets. So we're
 defining a new list. No

40
00:02:22,050 --> 00:02:25,550
need to call the list
 function in between. the brackets

41
00:02:25,550 --> 00:02:30,090
will write an expression.
 So here is the syntax expression for

42
00:02:30,100 --> 00:02:33,750
item in items.
 Now. what is the expression here

43
00:02:34,140 --> 00:02:37,310
. Well. in this case. we don't want
 to map the list of items to list of

44
00:02:37,310 --> 00:02:41,090
prices. so our expression is simply the item

45
00:02:41,100 --> 00:02:44,300
itself. So. basically. we'll iterate over the

46
00:02:44,300 --> 00:02:48,460
list of items will get each
 item and simply return it. However

47
00:02:49,140 --> 00:02:52,760
. you want to filter them
 so we'll add. And if statement

48
00:02:53,140 --> 00:02:56,670
if item of one is greater than or

49
00:02:56,670 --> 00:03:00,280
equal to 10 once again.
 I personally find what

50
00:03:00,280 --> 00:03:03,570
we have online. 11. More readable
 and cleaner than what we have

51
00:03:03,570 --> 00:03:07,210
online. 10. But if you want to
 use the map or filter functions, 
 that's perfectly fine.

