2
00:00:04,000 --> 00:00:08,010
In Python we have another very
 useful data structure called a

3
00:00:08,010 --> 00:00:11,280
set. which is basically a collection with no

4
00:00:11,280 --> 00:00:15,080
duplicates. So let's say we
 have a list of numbers

5
00:00:15,320 --> 00:00:19,140
with a bunch of
 duplicate items like this. If

6
00:00:19,140 --> 00:00:22,270
you want to remove the duplicates.
 you can convert this list to

7
00:00:22,270 --> 00:00:26,530
a set. So I'm going
 to define a variable, uniques. We

8
00:00:26,530 --> 00:00:30,390
call the set function and pass the numbers

9
00:00:30,460 --> 00:00:34,470
list. Now when we print this, take

10
00:00:34,470 --> 00:00:38,010
a look, we only have unique items. so

11
00:00:38,010 --> 00:00:41,430
one is not repeated.
 Also note that we use

12
00:00:41,440 --> 00:00:44,620
curly braces to define sets.
 So here we can

13
00:00:44,620 --> 00:00:48,270
define a second set using curly braces

14
00:00:48,270 --> 00:00:51,540
with two items one and four.
 Now similar to

15
00:00:51,540 --> 00:00:55,030
list, we can add new items
 to a set or remove an existing

16
00:00:55,030 --> 00:00:58,930
one. So here we can
 call second dot add; We

17
00:00:58,930 --> 00:01:02,260
can append a new number here.
 We can also

18
00:01:02,260 --> 00:01:05,780
call remove and

19
00:01:05,780 --> 00:01:09,460
we can use the len function
 to get the number of items in

20
00:01:09,460 --> 00:01:12,870
a set. So these
 are the basics. but where

21
00:01:12,870 --> 00:01:16,900
sets shine are in the powerful mathematical operations

22
00:01:16,900 --> 00:01:20,300
that are supported by them.
Let me show you. 
So I'm

23
00:01:20,300 --> 00:01:24,770
going to delete these three lines,
 These are pretty basic, 
 and

24
00:01:24,780 --> 00:01:29,300
rename uniques to first. 
So we

25
00:01:29,300 --> 00:01:34,360
have two sets first and second. 
Now we

26
00:01:34,360 --> 00:01:38,250
can get a union of
 two sets using the vertical bar.

27
00:01:38,740 --> 00:01:42,140
So this expression will
 return a new set that

28
00:01:42,150 --> 00:01:46,180
includes all the items that
 are either in the first or

29
00:01:46,180 --> 00:01:52,180
in the second set.
 Let me show you. So print. Actually

30
00:01:52,180 --> 00:01:55,690
I'm going to change
 this 4 to 5. 
 So now

31
00:01:55,690 --> 00:01:59,280
when we run this code
 you can see the union

32
00:01:59,280 --> 00:02:02,550
of these two sets is another set that

33
00:02:02,550 --> 00:02:05,870
includes all the items that are
 either in the first set or the

34
00:02:05,870 --> 00:02:09,770
second set. 
We can also get the intersection

35
00:02:09,780 --> 00:02:14,240
of two sets. So print first and

36
00:02:14,250 --> 00:02:17,840
second. this will return
 a new set that includes

37
00:02:17,850 --> 00:02:21,730
all the items that are
 in both first and second sets.

38
00:02:21,810 --> 00:02:25,220
Take a look. So the only number

39
00:02:25,220 --> 00:02:29,190
that exists in both
 these sets is 1. 
 We

40
00:02:29,190 --> 00:02:33,360
can also get the difference
 between two sets. 
 So print

41
00:02:33,740 --> 00:02:36,950
first minus second. When we

42
00:02:36,950 --> 00:02:40,700
run this code. we get 2 3 4. 
So

43
00:02:40,700 --> 00:02:43,960
the first set has this additional
 numbers that we don't have in

44
00:02:43,960 --> 00:02:47,690
the second set. 
And finally we have symmetric

45
00:02:47,690 --> 00:02:51,800
difference. So print first carrot

46
00:02:51,900 --> 00:02:55,790
second. 
This will return
 the items that are either in

47
00:02:55,790 --> 00:02:59,840
the first or second set
but not both. 
So

48
00:02:59,840 --> 00:03:04,710
let's run this. We get 2 3 4 5.
Now

49
00:03:04,710 --> 00:03:08,260
one thing you need to know
 about sets is that unlike lists they're

50
00:03:08,270 --> 00:03:11,480
unordered collection
 which means the items that

51
00:03:11,480 --> 00:03:15,030
we have in the set are not in sequence so 
we cannot access

52
00:03:15,030 --> 00:03:18,650
them using an index. 
In other words if

53
00:03:18,650 --> 00:03:22,570
we try to print first of zero. we

54
00:03:22,570 --> 00:03:26,170
will get a runtime error set. Object does

55
00:03:26,170 --> 00:03:29,780
not support indexing. So if
 you need to access items

56
00:03:29,780 --> 00:03:33,340
by index, you need to use a list. 
With sets quite

57
00:03:33,340 --> 00:03:36,600
often we use one of
 these operations here or we can

58
00:03:36,600 --> 00:03:40,210
check for the existence of an item in a set.
So we

59
00:03:40,210 --> 00:03:43,600
can check to see if 1 is in the

60
00:03:43,600 --> 00:03:48,050
first set. Then we can print Yes. there

61
00:03:48,050 --> 00:03:51,230
you go. 
So to recap, set is an

62
00:03:51,240 --> 00:03:54,560
unordered collection of unique items. 
We cannot have

63
00:03:54,560 --> 00:03:57,830
duplicates and 
these objects are unordered, They're not

64
00:03:57,830 --> 00:04:03,000
in sequence, so we cannot access them using an index.

