2
00:00:04,000 --> 00:00:07,850
all right. Now let's take a look
 at another useful built in function in

3
00:00:07,850 --> 00:00:11,120
Python. We use the input function to

4
00:00:11,120 --> 00:00:14,710
get input from the user
 as an argument that pass

5
00:00:14,890 --> 00:00:18,310
a string. This will be a
 label that will be displayed in

6
00:00:18,310 --> 00:00:21,640
the terminal. You will see
 that in a second. So let's

7
00:00:21,640 --> 00:00:25,340
add X colon. Now this function returns

8
00:00:25,350 --> 00:00:28,700
a string so we can store it in

9
00:00:28,700 --> 00:00:32,080
this variable. Now let's imagine that why

10
00:00:32,080 --> 00:00:35,590
should be X plus one. Save

11
00:00:35,590 --> 00:00:38,860
the changes now.
 Don't run this program using the

12
00:00:38,860 --> 00:00:42,670
code Runner extension because code runner by default

13
00:00:42,680 --> 00:00:46,240
runs your program in the output window.
 which is read only so

14
00:00:46,240 --> 00:00:49,490
you won't be able to
 enter a value. So open up

15
00:00:49,490 --> 00:00:53,640
the terminal using control and backspace once

16
00:00:53,640 --> 00:00:57,720
again. If you're on Windows Type python.
 if you're on Mac or Linux type

17
00:00:57,720 --> 00:01:01,360
Python3 and app.py. So

18
00:01:01,360 --> 00:01:05,350
here's our label. Let's enter
 a value like one. We

19
00:01:05,350 --> 00:01:08,690
got an error type error.
 What is going on

20
00:01:08,690 --> 00:01:12,090
here. Well. when we receive input

21
00:01:12,090 --> 00:01:15,360
from the user,
this input always comes as a

22
00:01:15,360 --> 00:01:18,750
string. so this expression at runtime will

23
00:01:18,750 --> 00:01:22,450
look like this string one plus

24
00:01:22,460 --> 00:01:26,320
one. Note that the number
 one is different from string

25
00:01:26,320 --> 00:01:29,920
one because these are two different types.
Now when Python sees

26
00:01:29,920 --> 00:01:33,230
this expression it doesn't know
 what to do because two

27
00:01:33,230 --> 00:01:36,850
objects can be concatenated if
 they are of the same type.

28
00:01:37,340 --> 00:01:40,680
So here we need
 to convert this string one to

29
00:01:40,680 --> 00:01:44,390
a number. In Python we have
 a few built in functions for

30
00:01:44,390 --> 00:01:48,090
type conversion. We have int for

31
00:01:48,090 --> 00:01:53,030
converting a number to an integer.
 We have float. we

32
00:01:53,030 --> 00:01:57,340
have bool and str or string. Now

33
00:01:57,340 --> 00:02:00,700
in this case we don't need
 to convert X to a string because X

34
00:02:00,710 --> 00:02:04,190
is already a string. If you don't believe me.
 let me show you. So

35
00:02:04,190 --> 00:02:08,460
I'm gonna comment out these few lines. Now

36
00:02:09,140 --> 00:02:13,020
let's print type of

37
00:02:13,030 --> 00:02:16,400
X. So type is
 another built in function We

38
00:02:16,400 --> 00:02:19,590
pass an object as an
 argument and it returns its

39
00:02:19,590 --> 00:02:23,240
type. Also. I'm going to
 comment out this line because

40
00:02:23,240 --> 00:02:27,320
that's the bad boy We don't want
 to execute this. Save the changes. back

41
00:02:27,320 --> 00:02:31,060
in the terminal. Let's run
 this program one more time. Enter

42
00:02:31,060 --> 00:02:34,610
one. Look. This is what the type function

43
00:02:34,610 --> 00:02:37,910
returns. Now don't worry about the class
 We'll talk about

44
00:02:37,910 --> 00:02:41,910
classes later in the course.
 so the type of X is a

45
00:02:41,910 --> 00:02:45,450
str or string. So let's

46
00:02:45,450 --> 00:02:48,960
do it this line.
 To fix this problem we

47
00:02:48,960 --> 00:02:52,540
need to convert X to an integer. And

48
00:02:52,540 --> 00:02:55,720
then we can print both X and y using a

49
00:02:55,720 --> 00:03:00,180
formatted string.
 Remember. So we had an f quotes

50
00:03:00,200 --> 00:03:04,020
like here we add a
 label like X. Then we'll add

51
00:03:04,030 --> 00:03:07,280
a field. So here we
 wanna print the value of

52
00:03:07,290 --> 00:03:11,060
X variable. After that.
 we add some more text

53
00:03:11,940 --> 00:03:16,350
and finally want to print
 the value of why. Let's

54
00:03:16,350 --> 00:03:19,770
run this program one more time. So here

55
00:03:19,770 --> 00:03:23,510
in the terminal. let's enter one. And

56
00:03:23,510 --> 00:03:28,050
here's the result. X is 1
 and y is 2, beautiful. Now

57
00:03:28,060 --> 00:03:31,650
all these built in functions
 are self explanatory. The only

58
00:03:31,650 --> 00:03:35,370
tricky one is bool. because in
 python we have this concept of

59
00:03:35,380 --> 00:03:38,570
truthy and falsy values. These are

60
00:03:38,570 --> 00:03:42,220
values that are not exactly a
 boolean True or False, but

61
00:03:42,220 --> 00:03:45,420
they can be interpreted as
 a boolean True or

62
00:03:45,420 --> 00:03:49,440
False. So here are
 the falsy values in

63
00:03:49,440 --> 00:03:53,010
python: empty strings are considered falsy,

64
00:03:53,020 --> 00:03:56,470
so they're interpreted
 as a Boolean False. Number

65
00:03:56,470 --> 00:03:59,850
zero is also falsy.
We have an object called

66
00:03:59,850 --> 00:04:03,240
None which represents the
 absence of a value. We'll

67
00:04:03,240 --> 00:04:07,430
look at this later in the course.
 So whenever we use these

68
00:04:07,430 --> 00:04:11,360
values in a boolean
context we'll get False.

69
00:04:11,740 --> 00:04:16,410
Anything else will be True.
 Let me show you a few examples. So

70
00:04:16,410 --> 00:04:21,050
in this interactive shell in Python
 let's convert number

71
00:04:21,050 --> 00:04:25,330
zero to bool. That's Falsy
 So we get False. What

72
00:04:25,330 --> 00:04:28,910
about bool of one? We get True. If

73
00:04:28,910 --> 00:04:32,570
you pass a negative number
 we'll also get True. If

74
00:04:32,570 --> 00:04:35,950
we pass a number larger
 than one like five, we

75
00:04:35,950 --> 00:04:39,190
still get true. So we
 only get false when we

76
00:04:39,190 --> 00:04:42,790
try to convert zero to a boolean.
 Now with strings
77
00:04:42,790 --> 00:04:46,330
I told you that an
 empty string is falsy So

78
00:04:46,330 --> 00:04:49,620
here we'll get False. Anything else is

79
00:04:49,620 --> 00:04:52,950
True. So even if I have a string that

80
00:04:52,950 --> 00:04:56,560
is "False" we'll get True because this

81
00:04:56,560 --> 00:05:00,440
is not an empty string.
It's a string with a few characters,
That's why it's evaluated as True.

