2
00:00:04,000 --> 00:00:08,030
Here in our sales module 
currently we have defined two functions. 
But

3
00:00:08,030 --> 00:00:11,580
we can also write any statements and 
these statements will be executed the

4
00:00:11,580 --> 00:00:14,860
first time this module is loaded.
So if you import this

5
00:00:14,860 --> 00:00:18,210
module in a few different modules in our program, 
python will load

6
00:00:18,210 --> 00:00:21,760
this module only once and 
then cash it in memory, so

7
00:00:21,760 --> 00:00:25,130
the statements that be write
here will be executed once. 
As

8
00:00:25,130 --> 00:00:29,010
an example let's print something like sales

9
00:00:29,120 --> 00:00:32,850
initialized. 
Now let's go back to our app module.

10
00:00:33,240 --> 00:00:36,660
To quickly look up a file,
you can press command and p on Mac or

11
00:00:36,660 --> 00:00:40,580
control and p on windows. 
Here we can type app dot

12
00:00:40,580 --> 00:00:44,760
py. 
There we are.
Now when we run this program you

13
00:00:44,760 --> 00:00:48,260
can see our sales module is initialized. 
Using the same technique

14
00:00:48,260 --> 00:00:51,980
we can write the initialization code for our packages. 
So

15
00:00:51,990 --> 00:00:55,170
once again. command and pee
 on Mac or control and pee

16
00:00:55,170 --> 00:00:58,720
on Windows. We can go
 to the input file for

17
00:00:58,720 --> 00:01:02,310
the e commerce package and print e

18
00:01:02,310 --> 00:01:06,030
commerce initialized. Now

19
00:01:06,030 --> 00:01:10,260
let's go to R ap module.
 Run the program again. As

20
00:01:10,260 --> 00:01:13,480
you see first our ecommerce package and 
then the

21
00:01:13,480 --> 00:01:17,060
sales module are initialized. 
Now let's take this to the next level.

22
00:01:17,740 --> 00:01:20,960
Let's go to our sales module and 
print the

23
00:01:20,960 --> 00:01:24,280
name of this module. 
So as you learn in the last lecture every

24
00:01:24,280 --> 00:01:27,990
module has a built inname attribute 
that is automatically

25
00:01:27,990 --> 00:01:31,600
created for us. So save the changes back

26
00:01:31,600 --> 00:01:37,080
to APP module. Let's run our program. So

27
00:01:37,090 --> 00:01:40,480
as you see here is the name
 of our module that is ecommerce dot

28
00:01:40,480 --> 00:01:43,720
shopping dot sales. 
However if

29
00:01:43,720 --> 00:01:48,670
we go to sales dot py and 
run this file, the

30
00:01:48,670 --> 00:01:52,320
name of our module has changed to main. 
So

31
00:01:52,320 --> 00:01:56,510
the name of the module that 
starts our program is always main. 
Now

32
00:01:56,510 --> 00:02:00,360
we can do something interesting.
 Let me show you. So I'm gonna delete

33
00:02:00,740 --> 00:02:04,030
this initialization code on the top. After we

34
00:02:04,030 --> 00:02:07,650
define his functions. I'm going to
 write some code like this. If

35
00:02:08,440 --> 00:02:11,780
name equals main with two

36
00:02:11,780 --> 00:02:16,280
underscores. I'm gonna print sales

37
00:02:16,290 --> 00:02:20,510
started and then call the calculate tax

38
00:02:20,620 --> 00:02:24,030
function. 
With this code we

39
00:02:24,030 --> 00:02:28,010
can make this file usable as a
 script as well as a reusable module

40
00:02:28,010 --> 00:02:31,190
that we can import into another module.
 So if we

41
00:02:31,190 --> 00:02:35,650
run this file directly, 
the name of this module will be main, and

42
00:02:35,660 --> 00:02:38,870
here we can have any initialization
 code or we can call one

43
00:02:38,870 --> 00:02:42,610
of the existing functions in this module. 
However if

44
00:02:42,610 --> 00:02:45,820
we import this module into another module, 
this code will

45
00:02:45,820 --> 00:02:49,270
not be executed because 
at that point the name of this module will

46
00:02:49,270 --> 00:02:52,990
no longer be main,
it will be e commerce dot shopping dot sales.

