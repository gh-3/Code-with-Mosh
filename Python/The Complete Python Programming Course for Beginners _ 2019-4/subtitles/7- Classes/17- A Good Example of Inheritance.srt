2
00:00:04,000 --> 00:00:07,790
Now let's look at a good example of inheritance. 
Let's imagine we

3
00:00:07,790 --> 00:00:11,800
want to model the concept of a stream of data. 
We

4
00:00:11,800 --> 00:00:15,570
can read a stream of data
from a file, 
from a network or

5
00:00:15,570 --> 00:00:19,250
from the memory. 
All these streams have a few things in common. 
We

6
00:00:19,250 --> 00:00:22,640
can open them, 
We can close them,
We can read data from them. 
But How

7
00:00:22,640 --> 00:00:25,870
we read data from a stream is 
dependent upon the

8
00:00:25,870 --> 00:00:29,670
type of the stream, because 
reading data from a file is different

9
00:00:29,670 --> 00:00:33,320
from reading it from a network. 
So let's

10
00:00:33,320 --> 00:00:38,340
start by defining a
 base class called Stream. In

11
00:00:38,340 --> 00:00:42,360
this class. I'm going to define
 methods like open and close. So

12
00:00:42,360 --> 00:00:45,900
do you find open now

13
00:00:45,900 --> 00:00:49,490
Here. Let's say we need a flag
 to know if the stream is open or

14
00:00:49,490 --> 00:00:56,510
not. 
So we can define a constructor. And

15
00:00:56,520 --> 00:01:00,020
in this constructor we can set opened

16
00:01:00,020 --> 00:01:03,570
flag initially to False. 
When

17
00:01:03,570 --> 00:01:08,290
we call the open method.
 we can set this to True like

18
00:01:08,290 --> 00:01:11,550
this. 
Now what if we try to open a

19
00:01:11,550 --> 00:01:15,270
stream that is already open?
That is an invalid operation.

20
00:01:15,310 --> 00:01:18,850
So perhaps we want to raise an exception. So

21
00:01:19,540 --> 00:01:23,500
we can check If self that opened. you

22
00:01:23,500 --> 00:01:27,240
want to raise an exception.
 What kind of exception. Well

23
00:01:27,250 --> 00:01:30,450
we don't want to do a ValueError, because 
here we're not dealing with a value.

24
00:01:30,840 --> 00:01:34,630
In this example
we can create a custom exception called

25
00:01:34,640 --> 00:01:38,640
InvalidOperationError; 
We don't have this in Python. 
In

26
00:01:38,640 --> 00:01:42,380
this case we can 
create a custom exception called InvalidOperation

27
00:01:42,380 --> 00:01:46,120
Error, 
because we don't have a built in exception in python that

28
00:01:46,120 --> 00:01:49,390
represents this concept. So on the

29
00:01:49,390 --> 00:01:53,540
top. let's create another class invalid

30
00:01:53,660 --> 00:01:57,710
operation error. 
So by convention all

31
00:01:57,710 --> 00:02:01,230
custom exceptions should end with error. 
Now

32
00:02:01,230 --> 00:02:05,360
we want to derive this from the base Exception class

33
00:02:05,840 --> 00:02:09,310
in python. 
So every time you want to create a custom exception, you

34
00:02:09,310 --> 00:02:12,800
should derive your class from the Exception class. 
Now

35
00:02:12,800 --> 00:02:16,750
here we don't need any code.
 so we simply add a past statement

36
00:02:17,640 --> 00:02:21,730
back to our open method.
 If this dream is already open. we

37
00:02:21,730 --> 00:02:25,720
want to raise an invalid operation error. and

38
00:02:25,720 --> 00:02:29,300
here we can give a
 friendly message like stream is

39
00:02:29,300 --> 00:02:32,860
already open. So this is our open method

40
00:02:33,240 --> 00:02:36,920
. Now let's define the close method
 that's going to be very similar. So

41
00:02:36,920 --> 00:02:42,020
to save time. I'm going
 to copy this four lanes and

42
00:02:42,020 --> 00:02:45,510
rename this method to close.
 Now here we want to check

43
00:02:45,520 --> 00:02:49,110
if the stream is already closed.
 You want to raise an

44
00:02:49,120 --> 00:02:52,500
invalid operation error. So if

45
00:02:52,500 --> 00:02:55,660
not self that opened. we

46
00:02:55,660 --> 00:02:59,070
should raise this exception and change. Their message

47
00:02:59,070 --> 00:03:04,170
to stream is already closed. Finally

48
00:03:04,310 --> 00:03:07,910
here with that open to thoughts. 
So

49
00:03:07,910 --> 00:03:12,060
these are the common features that
we need in every street. 
Now

50
00:03:12,060 --> 00:03:15,990
let's go ahead and
implement a file stream. 
Actually

51
00:03:15,990 --> 00:03:19,500
I have a type two e here.
 Sorry about that. So

52
00:03:19,500 --> 00:03:22,870
we define another class file stream. which in

53
00:03:22,870 --> 00:03:26,250
hurts from our stream class. As

54
00:03:26,250 --> 00:03:29,870
I told you before. how we read
 data from a file is different from

55
00:03:29,870 --> 00:03:33,470
how we read it from a network.
 So I'm going to define a method called

56
00:03:33,470 --> 00:03:36,930
Read and for simplicity. Let's

57
00:03:36,930 --> 00:03:40,430
just print reading data from a

58
00:03:40,430 --> 00:03:44,050
file. save the changes. Now

59
00:03:44,740 --> 00:03:48,620
let's duplicate these few lines and create a

60
00:03:48,620 --> 00:03:53,280
network stream class network stream. and

61
00:03:53,280 --> 00:03:56,830
we should also change the
 message to reading data from

62
00:03:56,830 --> 00:04:00,640
a network. 
This is a good example

63
00:04:00,640 --> 00:04:04,140
of inheritance because
first of all we don't have

64
00:04:04,190 --> 00:04:07,720
a multilevel inheritance, We only have 
one or two levels depending on

65
00:04:07,730 --> 00:04:11,140
how you want to calculate it.
So we have the Stream class on

66
00:04:11,140 --> 00:04:14,580
top of our hierarchy and 
below that we have two

67
00:04:14,580 --> 00:04:18,340
sub classes: File and network stream. 
It's okay

68
00:04:18,340 --> 00:04:21,580
if we add another level of inheritance here,
 but we shouldn't go

69
00:04:21,580 --> 00:04:25,370
beyond that. 
Also as you can see we don't have multiple

70
00:04:25,370 --> 00:04:29,060
inheritance, 
so our sub classes don't have multiple parents

