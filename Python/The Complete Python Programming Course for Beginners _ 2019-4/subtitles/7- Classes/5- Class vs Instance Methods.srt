2
00:00:04,000 --> 00:00:08,660
In the last lecture you learn about 
instance versus class attributes.

3
00:00:09,040 --> 00:00:12,200
We have the same concept around 
the methods that we define in

4
00:00:12,200 --> 00:00:16,290
a class. 
so we have instance method 
as well as class methods. 
In

5
00:00:16,290 --> 00:00:19,670
this example both these methods that
 we have defined in the point

6
00:00:19,670 --> 00:00:23,060
class are instance methods, so we 

7
00:00:23,060 --> 00:00:26,680
can call them using an
 instance of the point class, using

8
00:00:26,680 --> 00:00:30,260
an object. 
Generally speaking, you use these instance methods

9
00:00:30,260 --> 00:00:33,530
whenever we need an object reference.
 For example when

10
00:00:33,530 --> 00:00:37,250
drawing a point we really need
 to work with a specific point object.

11
00:00:37,740 --> 00:00:41,000
That is why this
 draw method is defined as

12
00:00:41,000 --> 00:00:44,470
an instance method. But there are
 times that we don't really need

13
00:00:44,480 --> 00:00:48,060
an existing object and that's
 when we use a class

14
00:00:48,060 --> 00:00:51,360
method. 
For example let's say in our

15
00:00:51,360 --> 00:00:55,500
program there are a lot of cases
 where we want to create a point with

16
00:00:55,500 --> 00:00:58,680
these initial values zero and zero. This

17
00:00:58,680 --> 00:01:01,930
is one way to create a point object.
 and that's perfectly fine. But

18
00:01:01,930 --> 00:01:05,510
we can come up with a different
 way to create a point object with

19
00:01:05,510 --> 00:01:08,900
these values. 
Like this: Point. 
So

20
00:01:08,900 --> 00:01:14,020
note that I'm using a class reference. 
then dot 0. 
In

21
00:01:14,020 --> 00:01:17,300
this case zero is a
 method that is defined at the

22
00:01:17,300 --> 00:01:20,590
class level and when we call it,
 it will return a

23
00:01:20,590 --> 00:01:24,960
point object initialized with these values. 
So

24
00:01:24,960 --> 00:01:28,340
we can get this point object and 
assign it

25
00:01:28,340 --> 00:01:31,750
to this point Variable. 
Now in this example we

26
00:01:31,750 --> 00:01:35,200
refer to this zero method
 as a factory method, because

27
00:01:35,200 --> 00:01:38,980
it's like a factory.
 it creates a new object. This

28
00:01:38,980 --> 00:01:42,420
example is pretty basic.
 Creating a zero point with

29
00:01:42,420 --> 00:01:45,760
these initial values is not a big deal.
 but there are times that

30
00:01:45,770 --> 00:01:49,260
initializing an object can
 be pretty complex. So every

31
00:01:49,260 --> 00:01:52,520
time you want to create an object
 of a given type. you might have

32
00:01:52,520 --> 00:01:55,790
to pass some magical values here. and you

33
00:01:55,790 --> 00:01:59,230
might have to repeat this in
 several places in your program. In

34
00:01:59,230 --> 00:02:03,090
that case. instead of
 passing all these magical values

35
00:02:03,100 --> 00:02:06,360
to create an object. you can define a

36
00:02:06,360 --> 00:02:09,640
factory method that will
 return an object with these

37
00:02:09,640 --> 00:02:13,030
values. And this way you
 can move this complexity of

38
00:02:13,030 --> 00:02:16,550
creating this object into that factory method

39
00:02:17,140 --> 00:02:20,990
. Okay. so let's
 delete what we have online

40
00:02:20,990 --> 00:02:24,450
10 and see how we can
 define a method at the class

41
00:02:24,450 --> 00:02:27,890
level? 
so back to our point. Glass would

42
00:02:27,890 --> 00:02:31,850
define a method. called it zero and

43
00:02:31,850 --> 00:02:35,240
call its first parameter cls which

44
00:02:35,240 --> 00:02:39,130
is short for class. 
Again this is purely convention.

45
00:02:39,140 --> 00:02:42,390
we can call this
 anything but by convention whenever we

46
00:02:42,390 --> 00:02:46,860
define a class method,
we call its first parameter cls.

47
00:02:47,340 --> 00:02:51,310
And as you can guess,
this is a reference to the class itself. 
So

48
00:02:51,310 --> 00:02:56,380
here we are not working with a
point object or a point instance. 
Now

49
00:02:56,430 --> 00:03:00,100
to make this method a class method
 we need to decorate

50
00:03:00,100 --> 00:03:05,350
it with something like this: 
at sign classmethod.

51
00:03:06,140 --> 00:03:09,780
This is what we call a decorator and 
it's a way to extend

52
00:03:09,780 --> 00:03:13,510
the behavior of a method or a function.
We'll look at decorators

53
00:03:13,510 --> 00:03:17,360
on how they work internally
 later in this section. So

54
00:03:17,740 --> 00:03:20,940
this is all you have to
 do to create a classmethod in

55
00:03:20,940 --> 00:03:24,090
python. 
Now in this class method we

56
00:03:24,090 --> 00:03:27,330
have a reference to our class.
So with that

57
00:03:27,330 --> 00:03:31,380
we can create a
point object with initial values.
So

58
00:03:31,380 --> 00:03:35,040
we call cls and give it these initial

59
00:03:35,040 --> 00:03:39,630
values. 
This is exactly like calling point

60
00:03:39,660 --> 00:03:43,840
of zero and zero. 
The difference is that if you use cls, at

61
00:03:43,840 --> 00:03:47,840
run time when we call the zero method 
Python interpreter will

62
00:03:47,850 --> 00:03:51,330
automatically pass a reference
 to the point class to

63
00:03:51,330 --> 00:03:54,870
the zero method. Okay. 
So we create a

64
00:03:54,870 --> 00:03:59,000
point object and then return it.
Save the changes. 
Now

65
00:03:59,000 --> 00:04:02,340
when we run the program
we got a point with these initial values.

