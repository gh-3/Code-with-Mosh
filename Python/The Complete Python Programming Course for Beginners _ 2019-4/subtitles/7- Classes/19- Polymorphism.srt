2
00:00:04,000 --> 00:00:08,370
So in the last lecture
you learn about abstract base classes. 
As

3
00:00:08,380 --> 00:00:12,240
another example, 
here I have defined an abstract base class called

4
00:00:12,250 --> 00:00:15,730
UIControl. 
This class has an

5
00:00:15,740 --> 00:00:19,060
abstract method called Draw.
And as you can see this

6
00:00:19,060 --> 00:00:22,630
method has no implementation.
So this class only defines

7
00:00:22,630 --> 00:00:26,700
the contract or 
the interface that all its derivatives

8
00:00:26,760 --> 00:00:30,630
should follow. Okay? 
Now here we have two

9
00:00:30,630 --> 00:00:34,200
classes that derive from UIControl: 
one is TextBox

10
00:00:34,210 --> 00:00:38,640
and the other is DropDownList.
Both these classes implement

11
00:00:38,690 --> 00:00:42,660
the draw method. 
Here we simply print TextBox and

12
00:00:43,040 --> 00:00:46,550
in the DropDownListown class 
we print DropDownListown.

13
00:00:46,940 --> 00:00:50,150
So nothing new so far.
Now here we

14
00:00:50,150 --> 00:00:53,960
also have a function called 
draw that takes a

15
00:00:53,960 --> 00:00:58,030
UIControl object and 
calls the draw method on it. 
So

16
00:00:58,240 --> 00:01:02,910
with this I can create
 a DropDownListown object drop

17
00:01:02,910 --> 00:01:07,000
down list and pass
 it to this draw function.

18
00:01:07,060 --> 00:01:10,380
like this. 
This should be perfectly fine because it drop

19
00:01:10,380 --> 00:01:14,010
down list is an instance of the UIControl class. 
To

20
00:01:14,010 --> 00:01:18,120
verify this let's call isinstance function and

21
00:01:18,120 --> 00:01:21,960
passed the studio object as
 well as the control class

22
00:01:22,640 --> 00:01:25,880
and then print the result on
 the terminal for now. I'm going

23
00:01:25,880 --> 00:01:29,380
to comment out this line.
 so save the changes

24
00:01:29,380 --> 00:01:32,720
and run the program.
 We get true. So it

25
00:01:32,720 --> 00:01:36,460
dropped down. This object is
 an instance of UI control

26
00:01:36,940 --> 00:01:40,470
. and that means wherever
 we expect a UI control

27
00:01:40,470 --> 00:01:43,590
object. we can pass any
 of it's derivatives like a

28
00:01:43,590 --> 00:01:47,910
text box or drop down list.
 Right. So let's

29
00:01:47,910 --> 00:01:51,460
delay this line and
 call the draw function with

30
00:01:51,460 --> 00:01:55,490
this detail object. What do you say we

31
00:01:55,490 --> 00:01:58,850
see a drop down list.
 Now. What if you pass a text box

32
00:01:58,850 --> 00:02:02,340
of dysfunction. Let's take a look.
 So I'm going to create a text

33
00:02:02,340 --> 00:02:05,720
box like this and

34
00:02:05,720 --> 00:02:09,600
then pass it. There is draw function. Run

35
00:02:09,600 --> 00:02:12,810
the program. 
This time we get text box. 
I want to

36
00:02:12,810 --> 00:02:16,050
ask what is the point of this?
Well let's take this to

37
00:02:16,050 --> 00:02:19,430
the next level and make it more interesting.
I want to change this

38
00:02:19,430 --> 00:02:23,290
draw function. 
So instead of getting a control object. I

39
00:02:23,290 --> 00:02:27,450
wanted to get a list or a couple of controls. 
So

40
00:02:28,040 --> 00:02:31,570
let's rename this to controls and
 he will use a for loop to

41
00:02:31,580 --> 00:02:34,910
iterate over this Controls object. So for

42
00:02:34,910 --> 00:02:38,980
control and controls. we

43
00:02:38,980 --> 00:02:42,760
call the draw method
 and each control object. Now

44
00:02:44,440 --> 00:02:48,470
we're going to pass a
 list of two objects. It

45
00:02:48,470 --> 00:02:51,770
drop down list and
 a text box. Let's run

46
00:02:51,770 --> 00:02:55,140
the program and see what happens.
 As you probably expect. we

47
00:02:55,140 --> 00:02:58,880
get two messages dropped
 on this and textbooks. So

48
00:02:58,880 --> 00:03:02,500
using this approach, 
we can render the user interface of

49
00:03:02,500 --> 00:03:06,370
an application. 
Imagine we have a form with a bunch of 
text boxes,

50
00:03:06,380 --> 00:03:09,550
drop down lists, radio buttons and so on. 
We could have

51
00:03:09,550 --> 00:03:12,860
a list of all these
 objects and pass that list to

52
00:03:12,860 --> 00:03:16,210
a function like draw and 
that function would take care of rendering the

53
00:03:16,220 --> 00:03:19,410
entire form. 
What is interesting here is that

54
00:03:19,410 --> 00:03:22,980
our draw function doesn't know
what kind of control it's working

55
00:03:22,980 --> 00:03:26,460
with. 
This is determined at runtime.
It simply iterates

56
00:03:26,460 --> 00:03:30,070
over the list of controls and 
calls the draw method of

57
00:03:30,070 --> 00:03:35,140
each control objects. 
This is what we call Polymorphism. 
Parliament's

58
00:03:35,150 --> 00:03:39,170
many more means form. so polymorphism means

59
00:03:39,180 --> 00:03:42,620
many forms. 
In this example, our draw method is taking

60
00:03:42,620 --> 00:03:46,260
many different forms and 
this is determined at runtime. 
We

61
00:03:46,260 --> 00:03:49,740
could be calling the draw method on
a text box or 
a drop down list or

62
00:03:49,740 --> 00:03:53,300
a radio button and so on.
So this is the classic example of polymorphism.

