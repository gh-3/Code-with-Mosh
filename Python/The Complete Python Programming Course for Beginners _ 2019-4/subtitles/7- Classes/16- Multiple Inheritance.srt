2
00:00:04,000 --> 00:00:07,770
In Python a class can have multiple base classes. 
So here

3
00:00:07,770 --> 00:00:11,840
we have this manager class
 that has two base classes: Employee

4
00:00:11,850 --> 00:00:15,940
and Person, 
This is what we call multiple inheritance and

5
00:00:15,940 --> 00:00:19,780
similar to multilevel inheritance 
it's a source of issues. 
If 

6
00:00:19,780 --> 00:00:23,160
you don't use it properly,
you're going to introduce all sorts of bugs

7
00:00:23,160 --> 00:00:26,860
in your programs. 
Let's take a look at an example. 
So

8
00:00:27,520 --> 00:00:31,060
in this employee class we
 have a great method and

9
00:00:31,060 --> 00:00:34,670
in this method was
 simply print employee greet. Our

10
00:00:34,670 --> 00:00:38,530
person class also has
 the exact same method. but

11
00:00:38,530 --> 00:00:42,130
here we print a different message.
 Now our manager class

12
00:00:42,130 --> 00:00:45,530
currently has no implementation. It simply inherits all

13
00:00:45,530 --> 00:00:49,340
the features of the
 person and employee classes. Now

14
00:00:49,340 --> 00:00:52,650
let's see: 
what happens when we create a manager object and

15
00:00:52,650 --> 00:00:55,760
call the great method?
 Which great method do you think is

16
00:00:55,760 --> 00:00:59,500
going to get called?
 Let's take a look. So I'm

17
00:00:59,500 --> 00:01:03,660
going to define a manager and called

18
00:01:03,660 --> 00:01:06,760
manager that great. Let's run the

19
00:01:06,760 --> 00:01:10,600
program. We get employee greed because

20
00:01:10,600 --> 00:01:14,490
we added the employee class first.
 So when Python interpreter

21
00:01:14,500 --> 00:01:17,700
tries to execute this line, 
first it looks at

22
00:01:17,700 --> 00:01:21,360
the manager class to see if
it has a method called greet, 
if

23
00:01:21,360 --> 00:01:25,190
it doesn't, it will look
at its first base class, 
Does

24
00:01:25,190 --> 00:01:28,770
the employee have a great method?
Yes, So the look up terminates

25
00:01:28,770 --> 00:01:32,160
here. 
If the employee class
doesn't have the greet method, then

26
00:01:32,160 --> 00:01:36,040
it will look at the person class.
So why is this an issue? 
Because

27
00:01:36,040 --> 00:01:39,520
if tomorrow another programmer joins
 our team and for whatever

28
00:01:39,520 --> 00:01:43,180
reason they decide to change the
 order of these base classes, our

29
00:01:43,180 --> 00:01:46,810
program will have a different behavior.
 So if they move

30
00:01:46,820 --> 00:01:50,710
this person class over here and

31
00:01:50,710 --> 00:01:54,560
run the program. 
Now we get a different output.

32
00:01:54,940 --> 00:01:58,550
so similar to multilevel inheritance, 
multiple inheritance can

33
00:01:58,550 --> 00:02:01,820
create all sorts of issues in your programs.
You will end up

34
00:02:01,820 --> 00:02:05,270
with classes that inherit features that they shouldn't, 
like a chicken

35
00:02:05,270 --> 00:02:08,590
that flies. 
So if multiple inheritance is a bad 

36
00:02:08,590 --> 00:02:12,520
thing, why does python support it? 
Well multiple

37
00:02:12,520 --> 00:02:15,830
inheritance is not always a bad thing.
 It's bad if you don't

38
00:02:15,830 --> 00:02:19,290
use it properly. 
If these classes that we have here, they

39
00:02:19,290 --> 00:02:22,860
are small classes and they
 have absolutely nothing in common

40
00:02:23,000 --> 00:02:26,710
and you want to inherit their features in a separate class, 
that's perfectly fine 

41
00:02:26,710 --> 00:02:30,720
to use multiple inheritance.
Things start to get complicated when

42
00:02:30,720 --> 00:02:34,360
these classes have things in common,
like the greet method here.

43
00:02:34,740 --> 00:02:39,640
So let me show you
 a good example of multiple inheritance. Here

44
00:02:39,640 --> 00:02:43,360
. We could have a
 class called Flyer. It's any object

45
00:02:43,370 --> 00:02:46,760
that knows how to fly.
 So let's I fly here

46
00:02:48,840 --> 00:02:52,570
So it's a very simple abstract concept. 
Similarly

47
00:02:52,570 --> 00:02:56,180
we could have another class called Swimmer. 
It's

48
00:02:56,180 --> 00:03:00,650
an object that knows how to swim. 
Now

49
00:03:00,710 --> 00:03:04,390
as you see, these two classes are 
very small and abstract. 
They

50
00:03:04,390 --> 00:03:07,760
have nothing in common.
 Now we can combine the features of

51
00:03:07,760 --> 00:03:11,800
these two classes so we
 can create a FlyingFish that

52
00:03:11,800 --> 00:03:14,910
knows how to fly,
how to swim. 
So it's a

53
00:03:14,910 --> 00:03:22,000
Flyer and also a Swimmer. 
This is a good example of a multiple inheritance.

