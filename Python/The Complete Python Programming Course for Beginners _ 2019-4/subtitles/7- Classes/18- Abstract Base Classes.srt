2
00:00:04,450 --> 00:00:07,620
We're going to continue with the example from the last lecture. 
There are

3
00:00:07,620 --> 00:00:10,950
a couple of issues with this implementation.
The first issue is that

4
00:00:10,950 --> 00:00:14,420
we can create a Stream object and

5
00:00:14,420 --> 00:00:18,100
called the open method.
Why is this an issue? 
Because

6
00:00:18,100 --> 00:00:21,700
this Stream class is an abstract concept. 
What

7
00:00:21,700 --> 00:00:25,270
does it mean to open a stream?
 Are we working with the file stream here

8
00:00:25,280 --> 00:00:29,180
and network stream? What kind of stream?
 So we shouldn't be able to directly

9
00:00:29,190 --> 00:00:32,730
create an instance of the stream class. We

10
00:00:32,730 --> 00:00:35,990
should always sub classes and then create an

11
00:00:36,000 --> 00:00:39,590
instance of the subclass, 
that is the first issue. 
So

12
00:00:39,590 --> 00:00:43,270
we only created this stream class as a base class

13
00:00:43,270 --> 00:00:47,380
to provide some code that
 we're going to reuse across different

14
00:00:47,380 --> 00:00:51,060
kinds of streams. This is the first issue.
Now the second issue.

15
00:00:51,640 --> 00:00:55,860
If you look at the implementation of FineStream and 

16
00:00:56,240 --> 00:01:00,140
NetworkStream classes, 
you can see both these classes have

17
00:01:00,140 --> 00:01:03,570
a read method. 
If tomorrow we decided to create a different

18
00:01:03,570 --> 00:01:06,930
kind of stream, we should remember to implement this

19
00:01:06,930 --> 00:01:10,560
read method and call it exactly
 read if we call it read_line

20
00:01:10,570 --> 00:01:13,840
or read_SDR or read whatever it's not

21
00:01:13,840 --> 00:01:17,010
going to be consistent with
 the other kinds of streams that

22
00:01:17,010 --> 00:01:20,360
we have here. 
In other words currently there is no way

23
00:01:20,360 --> 00:01:23,870
to enforce a common interface across different

24
00:01:23,870 --> 00:01:27,760
kinds of streams. 
This is more of a convention we have used here. 
It 

25
00:01:27,760 --> 00:01:31,860
would be nice to have a
 common contract or common interface across

26
00:01:31,910 --> 00:01:35,030
these different types of streams.
So how can we

27
00:01:35,030 --> 00:01:38,870
solve these problems? 
That's when we use an abstract base

28
00:01:38,870 --> 00:01:42,450
class. 
An abstract base class is like a half baked

29
00:01:42,460 --> 00:01:45,620
cookie. 
It's not ready to be eaten.
It's half baked. 
It's

30
00:01:45,620 --> 00:01:49,410
half cooked. 
Its purpose is to provide some common code

31
00:01:49,570 --> 00:01:53,040
to its derivatives. 
So here we want to make this stream

32
00:01:53,040 --> 00:01:56,420
class an abstract base class. To

33
00:01:56,420 --> 00:02:00,350
do that. we go
 on the top and from

34
00:02:00,360 --> 00:02:03,750
ABC module. which stands for abstract base

35
00:02:03,750 --> 00:02:08,160
class. we import the ABC class and

36
00:02:08,540 --> 00:02:11,890
abstract method function. which

37
00:02:11,890 --> 00:02:15,230
we're going to use as a decorator.
 So make sure to type this

38
00:02:15,230 --> 00:02:18,950
exactly like what you see here.
 So the name of the module is all

39
00:02:18,960 --> 00:02:22,700
lower case and 
the name of the class is all upper

40
00:02:22,700 --> 00:02:26,660
case. Now. to make
 this stream class abstract. we

41
00:02:26,660 --> 00:02:30,240
should derive it from
 the ABC Class, Abstract Base

42
00:02:30,240 --> 00:02:33,880
Class. Okay? that is the first step.
 The second step

43
00:02:33,890 --> 00:02:37,420
is to define the common interface for all streams. 
We

44
00:02:37,420 --> 00:02:40,880
want all streams to have a
 read method and potentially a write

45
00:02:40,890 --> 00:02:45,180
method in the future. So here

46
00:02:45,180 --> 00:02:49,170
we define read method. This

47
00:02:49,170 --> 00:02:52,570
method has no implementation. so we simply pass

48
00:02:52,570 --> 00:02:55,710
here. Now we need to

49
00:02:55,710 --> 00:02:59,850
decorate this method with abstract method decorator

50
00:03:00,340 --> 00:03:03,470
With these two simple steps,
 we fix both the problems I

51
00:03:03,470 --> 00:03:06,750
talked about in this lecture.
So now if I save

52
00:03:06,750 --> 00:03:10,020
the changes 
and try to run

53
00:03:10,020 --> 00:03:13,920
the program, 
you can see we immediately have this red underline with

54
00:03:13,930 --> 00:03:17,130
abstract methods instantiated. 
Basically when

55
00:03:17,130 --> 00:03:20,480
a class has an abstract method,
 it's considered an

56
00:03:20,490 --> 00:03:23,770
abstract class, and 
we cannot instantiate them which means

57
00:03:23,770 --> 00:03:27,420
we cannot create an instance of them. 
So when

58
00:03:27,420 --> 00:03:31,360
we run this program.
 we get this type error. Okay

59
00:03:32,040 --> 00:03:35,170
Now let's look at the second problem. 
So let's say

60
00:03:35,170 --> 00:03:38,850
tomorrow we're going to create a
 new kind of stream recorded memory

61
00:03:38,850 --> 00:03:42,700
stream. and we drive it
 from the stream class For

62
00:03:42,700 --> 00:03:46,210
now. Let's just pass and create a memory

63
00:03:46,210 --> 00:03:49,840
stream. Object. 
Once again you can see we have a

64
00:03:49,840 --> 00:03:53,730
red underline. 
abstract class with abstract methods

65
00:03:53,740 --> 00:03:56,910
instantiated. 
what's going on here? 
In our

66
00:03:56,910 --> 00:04:00,520
stream class we defined an abstract method called

67
00:04:00,640 --> 00:04:04,360
read. Let's take a look.
 Here's our abstract method

68
00:04:05,440 --> 00:04:08,990
If a class derives from the Stream class, 
it has to implement

69
00:04:08,990 --> 00:04:12,960
this method. 
Otherwise that class will also be considered abstract.

70
00:04:13,640 --> 00:04:17,240
So in this example our new class Memory

71
00:04:17,240 --> 00:04:21,020
Stream is also abstract. 
If you want to make this a concrete class,

72
00:04:21,020 --> 00:04:24,420
so we can instantiate it,
we'll have to implement the

73
00:04:24,420 --> 00:04:29,060
read method. so define read. and

74
00:04:29,060 --> 00:04:32,650
here we print reading data from a memory

75
00:04:32,650 --> 00:04:36,240
stream. 
Now this memory stream

76
00:04:36,450 --> 00:04:40,800
is a concrete class. 
We can instantiat it here and

77
00:04:40,930 --> 00:04:44,710
it also follows the contract 
or the interface of

78
00:04:44,710 --> 00:04:47,800
the Stream class. 
So all our Streams now have a read method.

