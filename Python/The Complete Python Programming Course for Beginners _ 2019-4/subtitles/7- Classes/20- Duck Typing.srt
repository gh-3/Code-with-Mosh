2
00:00:04,000 --> 00:00:08,540
What you saw in the last lecture was 
the classic example of polymorphism. 
So

3
00:00:08,540 --> 00:00:11,820
to achieve polymorphic behavior
we start by defining a

4
00:00:11,820 --> 00:00:15,330
base class and 
in this class we define

5
00:00:15,330 --> 00:00:19,290
the common behavior or 
the common methods that 
we need in distributive 

6
00:00:19,300 --> 00:00:23,580
or children. 
With this we

7
00:00:23,580 --> 00:00:27,360
achieve polymorphic behavior in
our draw function online 22.

8
00:00:27,740 --> 00:00:31,620
So depending on the type of
 control object that we're working with at runtime,

9
00:00:31,630 --> 00:00:34,850
this draw method takes a different form. 
It might be

10
00:00:34,850 --> 00:00:38,310
the draw method in the text box
or a drop down list 
or radio

11
00:00:38,310 --> 00:00:41,880
button and so on.
So this is how polymorphism works in

12
00:00:41,880 --> 00:00:45,190
pretty much all languages that 
support classes. 
But because 

13
00:00:45,190 --> 00:00:49,020
python is a dynamically typed language,
 we don't necessarily need

14
00:00:49,030 --> 00:00:52,340
this UIControl as the base class here. 
In

15
00:00:52,340 --> 00:00:55,610
other words if you get rid of this class, 
let's just

16
00:00:55,620 --> 00:00:59,270
delete it for now
we should also delete it

17
00:00:59,360 --> 00:01:02,510
from these two places. 
With this

18
00:01:02,510 --> 00:01:06,080
change we can still achieve polymorphic behavior. 
Why?

19
00:01:06,330 --> 00:01:10,200
Here's the reason.
Look at this controls parameter. 
Nowhere

20
00:01:10,200 --> 00:01:13,380
here we have specified 
the type of this parameter, right? 
This

21
00:01:13,380 --> 00:01:16,620
is purely a label, a name.
 we can pass any kind of

22
00:01:16,620 --> 00:01:20,320
objects to this draw function.
As long as that object is

23
00:01:20,330 --> 00:01:23,690
Iterable, Python will be happy because here online

24
00:01:23,690 --> 00:01:27,270
15 we are looping over that object, so 
that object has

25
00:01:27,270 --> 00:01:31,060
to be Iterable.
So technically we can pass a string,

26
00:01:31,070 --> 00:01:34,620
a list, a topple, a dictionary 
anything that is iterable

27
00:01:34,620 --> 00:01:38,480
here. 
By the same token that iterable object, 

28
00:01:38,490 --> 00:01:41,770
its individual parts, 
should have a draw method. 
So

29
00:01:41,770 --> 00:01:45,540
Python doesn't care if these
 objects derived from the UIControl

30
00:01:45,540 --> 00:01:49,140
class. 
As long as these objects have 
a draw method, python

31
00:01:49,140 --> 00:01:52,970
will be happy. 
This is what we call duck typing. So

32
00:01:52,970 --> 00:01:56,090
if it walks like a duck and
quacks like a duck, 
it is a

33
00:01:56,090 --> 00:01:59,230
duck. 
That is how python works.
Because python is

34
00:01:59,230 --> 00:02:03,360
a dynamically typed language and 
it doesn't check the type of objects, 
it 

35
00:02:03,370 --> 00:02:06,600
only looks for the existence of 
certain methods in our

36
00:02:06,600 --> 00:02:10,540
objects. 
In other words in this case on line 16, itt

37
00:02:10,540 --> 00:02:13,700
only looks for the existence of the draw method. 
So if

38
00:02:13,700 --> 00:02:17,360
this object has a draw method,
 Python assumes it's a UIControl.

39
00:02:17,740 --> 00:02:21,110
It's exactly like saying if 
it walks like a duck and 
quacks like

40
00:02:21,110 --> 00:02:25,080
a duck, 
it is a duck.
So to achieve polymorphic behavior

41
00:02:25,140 --> 00:02:28,890
we don't necessarily need 
a base class like UIControl because

42
00:02:28,890 --> 00:02:32,680
Python supports duck typing. 
Having said that. having

43
00:02:32,680 --> 00:02:36,940
that control as an abstract base
 class is a good practice because

44
00:02:36,940 --> 00:02:41,420
it enforces a common interface
 or a common contract across

45
00:02:41,430 --> 00:02:44,730
all its derivatives.
 With this will make sure that

46
00:02:44,740 --> 00:02:49,000
every kind of UIControl
will have a draw method.

