2
00:00:04,000 --> 00:00:07,690
So you have seen that inheritance is a good thing. 
It prevents code

3
00:00:07,690 --> 00:00:10,870
duplication and allows us to reuse code. 
For

4
00:00:10,870 --> 00:00:14,820
example here we have this bird
class that inherits from the animal, so

5
00:00:14,820 --> 00:00:18,650
it inherits all the features
 of this animal class. 
 In

6
00:00:18,650 --> 00:00:21,940
this case we're reusing the eat Method here. 
That's pretty

7
00:00:21,940 --> 00:00:25,390
good. 
However too much of a good thing is a bad thing.

8
00:00:25,510 --> 00:00:28,730
And that's very true about inheritance because too

9
00:00:28,730 --> 00:00:32,360
much inheritance between classes 
can increase complexity and 

10
00:00:32,370 --> 00:00:36,580
introduce various kinds of issues.
Let me show you an example. 
Here

11
00:00:36,580 --> 00:00:40,470
I'm going to define a class called Chicken. 
Well

12
00:00:40,480 --> 00:00:43,660
a Chicken is a bird.
so we can inherit it from the

13
00:00:43,660 --> 00:00:47,680
Bird class. 
And here I'm going to use the pass statement to

14
00:00:47,680 --> 00:00:51,110
define an empty class.
 So as I've told you before. Pass

15
00:00:51,120 --> 00:00:54,890
is a statement that doesn't do anything.
 We just use it to make Python interpreter

16
00:00:54,890 --> 00:00:58,950
happy because we cannot
 have a class without anything

17
00:00:58,950 --> 00:01:02,080
in it. We need to have
 at least one statement. So here we

18
00:01:02,080 --> 00:01:05,350
have the pass class. 
But there is a problem in this code.

19
00:01:06,040 --> 00:01:09,950
What is the problem?
Well the Chicken class inherits

20
00:01:09,960 --> 00:01:13,320
all the features of the bird class. 
But

21
00:01:13,320 --> 00:01:16,760
the chicken cannot fly.
So with this implementation, I

22
00:01:16,760 --> 00:01:20,540
can create a Chicken object and
 call the fly method at it. So

23
00:01:20,540 --> 00:01:23,990
this is an example of inheritance abuse. 
Another

24
00:01:23,990 --> 00:01:27,210
example of inheritance abuse
 is around the concept of

25
00:01:27,220 --> 00:01:30,950
employees and 
I've seen that a lot in my career. 
So some

26
00:01:30,950 --> 00:01:34,850
people saying: 
well an employee is a person and

27
00:01:34,850 --> 00:01:38,420
a person is a living creature which

28
00:01:38,420 --> 00:01:41,890
is a thing blah blah blah. 
This is what we call

29
00:01:41,970 --> 00:01:45,280
multilevel inheritance which 
can significantly increase the

30
00:01:45,280 --> 00:01:48,850
complexity of your software.
To tell you a little story in

31
00:01:48,860 --> 00:01:52,450
one of my previous jobs, 
we had this consultant and he was charging like

32
00:01:52,460 --> 00:01:56,820
$150 an hour or more
 and he came up with a huge inheritance

33
00:01:56,820 --> 00:02:00,220
hierarchy like this. 
In fact three times bigger than this. 
There

34
00:02:00,220 --> 00:02:03,810
were so many levels and 
he essentially tried to model the entire

35
00:02:03,810 --> 00:02:07,340
universe. 
This is really really bad. 
Just

36
00:02:07,340 --> 00:02:10,470
because an employee is a person and the

37
00:02:10,470 --> 00:02:13,880
person is a LivingCreature in the real world, 
doesn't mean you

38
00:02:13,880 --> 00:02:17,120
should have classes like this in your software. 
The methods you

39
00:02:17,120 --> 00:02:21,070
add in your classes 
are there
to solve a business problem, 
that

40
00:02:21,070 --> 00:02:24,520
is the focus of your software.
So just because an animal can eat

41
00:02:24,520 --> 00:02:27,770
in the real world, 
doesn't mean your animal class should also have the

42
00:02:27,780 --> 00:02:31,850
eat method. 
You got the point, right? 
So this is multilevel inheritance

43
00:02:31,850 --> 00:02:35,680
and you should avoid it at all times.
If you want to use inheritance, limited

44
00:02:35,680 --> 00:02:42,000
to one or two levels.
Going beyond that? 
trust me, 
your'e gonna shoot yourself in the food.

