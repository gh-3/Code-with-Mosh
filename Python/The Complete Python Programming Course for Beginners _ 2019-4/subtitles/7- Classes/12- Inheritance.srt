2
00:00:04,390 --> 00:00:07,820
As you build various classes, you may
notice that some of these classes might

3
00:00:07,820 --> 00:00:11,680
have one or more features
 or functions in common. Here

4
00:00:11,680 --> 00:00:16,340
is an example. 
I'm going to create a class called mammal. All

5
00:00:16,340 --> 00:00:19,990
mammals should be able to eat. right?
 So let's define a

6
00:00:19,990 --> 00:00:23,380
function called eat and
 in this function would simply

7
00:00:23,380 --> 00:00:27,270
print it Now. All mammals

8
00:00:27,360 --> 00:00:30,690
. As far as I know.
 I should be able to walk. So let's

9
00:00:30,690 --> 00:00:34,200
define another method walk and

10
00:00:34,200 --> 00:00:38,040
in this method with print walk. Now I'm

11
00:00:38,040 --> 00:00:41,920
going to select all this
 code and hold down Shift Ault

12
00:00:42,070 --> 00:00:46,760
and Down Arrow to duplicate this class. No

13
00:00:47,240 --> 00:00:50,590
. let's rename your
 second class fish. As we

14
00:00:50,590 --> 00:00:54,210
know all fish should be
 able to eat. But fish

15
00:00:54,350 --> 00:00:58,420
don't walk. They swim. So let's change the

16
00:00:58,420 --> 00:01:01,830
second method to swim.
 as well as this message that

17
00:01:01,830 --> 00:01:05,100
we print. No. what is going

18
00:01:05,100 --> 00:01:09,250
on here. As you can see.
 we have repeated or duplicated

19
00:01:09,250 --> 00:01:12,700
the eat method in both these classes. 
Now

20
00:01:12,700 --> 00:01:15,960
in this implementation are eight.
 Method is only a single line of

21
00:01:15,960 --> 00:01:19,280
code. but in the real world program.
 you might have a method that

22
00:01:19,280 --> 00:01:22,510
is five or 10 lines of code.
 and you might have repeated that

23
00:01:22,510 --> 00:01:25,720
in multiple classes. This is
 bad because if there is

24
00:01:25,720 --> 00:01:29,930
a bug in one of these methods.
you have to fix it in multiple places. 
Or

25
00:01:29,930 --> 00:01:33,380
similarly if you need to
 change the behavior of this method then

26
00:01:33,380 --> 00:01:36,660
again you have to do it in multiple places. 
In programming we

27
00:01:36,660 --> 00:01:40,720
have this concept called DRY
 which stands for Don't Repeat

28
00:01:40,730 --> 00:01:44,010
Yourself. 
so we don't want to repeat ourselves to solve this

29
00:01:44,010 --> 00:01:48,130
problem. 
We have two solutions:
We can use inheritance or

30
00:01:48,140 --> 00:01:51,690
composition. 
In this lecture we're going to look at inheritance. 
And

31
00:01:51,690 --> 00:01:55,480
I'm going to talk about composition later in this section. 
Inheritance

32
00:01:55,490 --> 00:01:59,060
is a mechanism that allows us
 to define the common behavior or

33
00:01:59,060 --> 00:02:02,900
common functions in one
 class and then inherit them

34
00:02:02,960 --> 00:02:06,390
in other classes. Here's how it works.
 So I'm going

35
00:02:06,390 --> 00:02:10,290
to define a separate class called Animal and

36
00:02:10,290 --> 00:02:14,010
then move the eight
 method in this class like

37
00:02:14,010 --> 00:02:17,660
this. Now you can
 see our mammal classes simpler

38
00:02:18,140 --> 00:02:21,410
. so to have it
 inherit, the eat method, from

39
00:02:21,410 --> 00:02:25,060
the Animal class. we simply add parenthesis here

40
00:02:25,440 --> 00:02:28,800
and then specify the animal class. This is

41
00:02:28,810 --> 00:02:32,470
inheritance in action. 
We say the mammal class

42
00:02:32,480 --> 00:02:36,180
is an Animal, so it inherits all

43
00:02:36,180 --> 00:02:40,280
the features or all the
methods of the Animal class. 
In

44
00:02:40,280 --> 00:02:43,770
this situation we refer
 to the Animal class as

45
00:02:43,770 --> 00:02:47,610
the Parent or Base class and 
Mammals

46
00:02:47,620 --> 00:02:51,570
as the Child or Subclass. So

47
00:02:51,580 --> 00:02:54,920
let's go ahead and apply
 the same change on the fish

48
00:02:54,920 --> 00:02:59,050
class. We get rid
 of the eat method and

49
00:02:59,740 --> 00:03:03,420
at animal as the base class. Now

50
00:03:03,420 --> 00:03:07,610
when we create a mammal object 
like m, you

51
00:03:07,610 --> 00:03:11,040
can see this mammal has
 both eat and walk

52
00:03:11,040 --> 00:03:14,360
methods. So let's call it run the

53
00:03:14,360 --> 00:03:17,980
program. We see this message
 on the terminal so this verifies

54
00:03:17,980 --> 00:03:22,160
that are mammal class inherits from the animal class. 
Now

55
00:03:22,160 --> 00:03:25,740
this inheritance is not limited to methods.
 We can also inherit

56
00:03:25,740 --> 00:03:29,450
the attributes of a base class.
 for example. back

57
00:03:29,450 --> 00:03:35,640
to our animal class.
 I'm going to define a constructor. And

58
00:03:35,650 --> 00:03:39,740
in this constructor. let's set age to

59
00:03:39,740 --> 00:03:43,230
one. Now when we create a Mammal

60
00:03:43,230 --> 00:03:46,680
object our Mammal object will automatically have the

61
00:03:46,690 --> 00:03:49,920
age attribute initialized to one. Let me

62
00:03:49,920 --> 00:03:53,380
show you so back here. Let's

63
00:03:53,380 --> 00:03:56,570
print em that age. There you

64
00:03:56,570 --> 00:04:00,210
go. Run the program. Here's

65
00:04:00,210 --> 00:04:04,050
a result. So this
 is the basic of inheritance

66
00:04:04,540 --> 00:04:08,110
now. in real programs.
 we don't build Animals or Mammals or

67
00:04:08,110 --> 00:04:11,290
Fish. 
on this we're building a game.
But I use this as an

68
00:04:11,290 --> 00:04:14,770
example because it's easier
 to understand the relationship between

69
00:04:14,780 --> 00:04:23,000
a Mammal and an Animal.
Later in this section
 I'm gonna give you a real world 
 example of inheritance in our programms.

