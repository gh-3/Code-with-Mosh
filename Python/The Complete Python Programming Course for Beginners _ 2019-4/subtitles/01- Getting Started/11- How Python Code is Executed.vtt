WEBVTT

1
00:00:00.000 --> 00:00:03.500


2
00:00:03.500 --> 00:00:08.000
The programming languages we use, like C, C#, Java, Python,

3
00:00:08.000 --> 00:00:12.000
these are all simple text based languages that we

4
00:00:12.000 --> 00:00:16.000
humans understand; computers don't understand them, they only understand

5
00:00:16.000 --> 00:00:20.000
machine code. So if you have some code written in C, we should

6
00:00:20.000 --> 00:00:24.000
convert it to machine code, and that's the job of a C Compiler.

7
00:00:24.000 --> 00:00:28.000
So a C compiler is a program that knows how to convert or

8
00:00:28.000 --> 00:00:32.000
compile C code into machine code. However, this machine

9
00:00:32.000 --> 00:00:36.000
code is specific to the type of CPU of a computer

10
00:00:36.000 --> 00:00:40.000
so if you compile a C program on a Windows machine we can't

11
00:00:40.000 --> 00:00:44.000
execute it on a Mac, because Windows and Mac have different machine code

12
00:00:44.000 --> 00:00:48.000
just like how people from different countries speak different languages.

13
00:00:48.000 --> 00:00:52.000
Java came to solve this problem. Java compiler doesn't

14
00:00:52.000 --> 00:00:56.000
compile Java code into machine code, instead it

15
00:00:56.000 --> 00:01:00.000
compiles it into a portable language called JavaBytecode,

16
00:01:00.000 --> 00:01:04.000
Which is not specific to a hardware platform like Windows or

17
00:01:04.000 --> 00:01:08.000
Mac. Now, we still need to convert Java Bytecode to

18
00:01:08.000 --> 00:01:12.000
machine code. So Java also comes with a program called Java

19
00:01:12.000 --> 00:01:16.000
virtual machine or JVM for doing this. When we run a

20
00:01:16.000 --> 00:01:20.000
Java program, JVM kicks in, it loads our Java

21
00:01:20.000 --> 00:01:24.000
Bytecode and then at run time, it will convert each instruction to

22
00:01:24.000 --> 00:01:28.000
machine code. With this model, we can run Java Bytecode on any

23
00:01:28.000 --> 00:01:32.000
platforms that have a JVM. We have JVM implementations for

24
00:01:32.000 --> 00:01:36.000
Windows, Mac, and so on. So the JVM implementations

25
00:01:36.000 --> 00:01:40.000
on Windows, knows how to convert Java Bytecode

26
00:01:40.000 --> 00:01:44.000
into machine code that a Windows machine can understand. C#

27
00:01:44.000 --> 00:01:48.000
and Python have also taken the same route, so they are platform

28
00:01:48.000 --> 00:01:52.000
independent. When we run a python program using CPython

29
00:01:52.000 --> 00:01:56.000
first it will compile our Python code into Python Bytecode,

30
00:01:56.000 --> 00:02:00.000
then it will pass that Bytecode to Python Virtual Machine

31
00:02:00.000 --> 00:02:04.000
which will in turn convert it into machine code and execute it.

32
00:02:04.000 --> 00:02:08.000
This is how C Python works. In the last lecture we talked about

33
00:02:08.000 --> 00:02:12.000
various Python implementations. I told you that if you wanna reuse some

34
00:02:12.000 --> 00:02:16.000
Java code in a Python program we should use Jython.

35
00:02:16.000 --> 00:02:20.000
Now, let's see how Jython makes this possible. When you use

36
00:02:20.000 --> 00:02:24.000
Jython to run a python program, instead of compiling your

37
00:02:24.000 --> 00:02:28.000
Python code into Python Bytecode, it will compile it to Java

38
00:02:28.000 --> 00:02:32.000
Bytecode, so we can take this Java Byte code and run it using

39
00:02:32.000 --> 00:02:36.000
Java virtual machine. And that's why we can import some Java code

40
00:02:36.000 --> 00:02:40.000
into a Python program when using Jython, because the end result is

41
00:02:40.000 --> 00:02:45.000
Java Bytecode which will eventually be executed by Java Virtual Machine.