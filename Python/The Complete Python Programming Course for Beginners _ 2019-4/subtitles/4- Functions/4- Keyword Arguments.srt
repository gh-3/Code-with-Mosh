1
00:00:00,840 --> 00:00:04,470
mhm. Yeah. let's

2
00:00:04,470 --> 00:00:08,890
create another function we call an increment. We

3
00:00:08,890 --> 00:00:12,380
want to use this function
 to increment a number by

4
00:00:12,380 --> 00:00:16,200
a given value. So here was simply return

5
00:00:16,210 --> 00:00:20,050
number. Plus. by now

6
00:00:20,050 --> 00:00:23,740
we can call this
 function like this increment two

7
00:00:23,750 --> 00:00:27,260
and one. This returns a
 value so we can store it

8
00:00:27,740 --> 00:00:31,140
in a variable like
 result and then printed on

9
00:00:31,140 --> 00:00:34,710
the terminal. Let's run the program.
 We get three

10
00:00:34,720 --> 00:00:38,510
Beautiful. Now we can simplify this code. We

11
00:00:38,510 --> 00:00:41,960
have used this result variable
 only in a single place that

12
00:00:41,960 --> 00:00:45,710
is line six. So we
 don't really need it. So

13
00:00:45,710 --> 00:00:49,080
online. Six we can replace result with

14
00:00:49,080 --> 00:00:52,460
a call to increment function like this

15
00:00:53,240 --> 00:00:57,110
. So when Python
 interpreter execute this code first

16
00:00:57,110 --> 00:01:00,320
it will call the increment function.
 It will get the

17
00:01:00,320 --> 00:01:03,440
result and temporary stored in
 a variable for us. We

18
00:01:03,440 --> 00:01:06,830
don't see that variable and then
 it will pass that variable as

19
00:01:06,830 --> 00:01:10,820
an argument to the print function. Now. if

20
00:01:10,820 --> 00:01:15,300
we're on this program. we get
 the exact same result. Beautiful. Now

21
00:01:15,300 --> 00:01:18,690
we can make this code more readable.
 If someone else looks at

22
00:01:18,690 --> 00:01:22,680
line five they may
 not know exactly what these

23
00:01:22,690 --> 00:01:26,390
arguments are for. We can
 use a keyword argument to

24
00:01:26,390 --> 00:01:30,330
make this code more readable.
 So this one here

25
00:01:30,340 --> 00:01:33,770
is the value of this. By parameter. we

26
00:01:33,770 --> 00:01:37,410
can prefix it with the
 name of the parameter like

27
00:01:37,410 --> 00:01:41,040
this. Now we can
 read this code almost like

28
00:01:41,040 --> 00:01:44,940
playing English increment to buy one. So

29
00:01:44,940 --> 00:01:48,300
if you're calling a function
 with multiple arguments and it's

30
00:01:48,300 --> 00:01:51,670
not quite clear what the
 arguments are for. you can make

31
00:01:51,670 --> 00:01:55,530
your code more readable
 by using keyword arguments. 
 So here by=1 is a keyword argument.

