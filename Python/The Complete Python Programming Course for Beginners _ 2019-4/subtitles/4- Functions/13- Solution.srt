1
00:00:03,340 --> 00:00:06,580
All right. let's see how we can
 solve this problem. So we get the

2
00:00:06,580 --> 00:00:10,450
input and check to see
 if input is divisible by three

3
00:00:11,740 --> 00:00:15,330
. Then we can set
 a variable like result to

4
00:00:15,330 --> 00:00:19,020
fears. Now let me temporarily simplify these

5
00:00:19,020 --> 00:00:22,760
rules because I want to show
 you a really cool technique. So

6
00:00:23,240 --> 00:00:26,700
let's imagine if the input
 is divisible by three will

7
00:00:26,700 --> 00:00:31,060
return phase. otherwise will return bus. So

8
00:00:32,240 --> 00:00:35,760
Els Colon. we set the result to

9
00:00:35,760 --> 00:00:39,650
buzz and finally will return this result variable

10
00:00:41,340 --> 00:00:44,760
. This is one way to implement these rules.
 But it's not the best way

11
00:00:44,820 --> 00:00:48,580
. There is a better and cleaner way.
 Let me show you. So instead

12
00:00:48,580 --> 00:00:52,330
of defining this result variable and then returning

13
00:00:52,330 --> 00:00:56,960
it. we can simply return this string here

14
00:00:57,940 --> 00:01:01,180
and also here.
 And then we can get rid

15
00:01:01,180 --> 00:01:04,880
of land sticks.
 So be removed. One unnecessary line

16
00:01:04,880 --> 00:01:08,420
of code. This was one technique.
 The other technique

17
00:01:08,420 --> 00:01:12,740
I want to show you is
 when you have an if statement and

18
00:01:12,750 --> 00:01:16,090
in your if block your
 returning a value you don't really

19
00:01:16,090 --> 00:01:19,500
need an else clause, Because

20
00:01:19,500 --> 00:01:23,340
if this condition is evaluated to false,
 the control moves

21
00:01:23,390 --> 00:01:27,550
to the else clause and
 all we're doing here is returning

22
00:01:27,560 --> 00:01:31,160
a different value. So this
 is the only possible outcome

23
00:01:31,640 --> 00:01:35,520
. So here we can
 remove this else clause and simply

24
00:01:35,820 --> 00:01:39,420
return bus. So with this technique. I

25
00:01:39,420 --> 00:01:42,760
removed an unnecessary indentation as well.
 I've made our

26
00:01:42,760 --> 00:01:46,110
code more linear. Okay. Now let's go back

27
00:01:46,110 --> 00:01:49,650
to our original algorithm.
 So if the input is divisible by

28
00:01:49,650 --> 00:01:52,810
three will return phase. Now we

29
00:01:52,810 --> 00:01:56,850
check to see if the input
 is divisible by five will return bus

30
00:01:57,240 --> 00:02:00,960
. So here we don't really
 need an l f. Because if

31
00:02:00,960 --> 00:02:05,010
this condition is false. will get here anyway

32
00:02:05,020 --> 00:02:09,030
. So we can check
 if input is divisible by

33
00:02:09,030 --> 00:02:13,610
five. We will return buzz once

34
00:02:13,610 --> 00:02:17,410
again. If this condition is false.
 the control moves here

35
00:02:17,420 --> 00:02:21,030
. Now we check to see
 if the input is divisible by

36
00:02:21,030 --> 00:02:24,790
three. And it is also divisible

37
00:02:24,790 --> 00:02:30,040
by five. Then we will return fares

38
00:02:30,050 --> 00:02:34,010
bus. Now this expression is
 a little bit long. I

39
00:02:34,010 --> 00:02:38,760
would prefer to make it
 more readable by putting parenthesis around

40
00:02:38,760 --> 00:02:42,640
the 1st and 2nd parts like

41
00:02:42,650 --> 00:02:46,010
this. That is cleaner. Now. if

42
00:02:46,010 --> 00:02:49,760
this condition is also false.
 the control moves here. That

43
00:02:49,760 --> 00:02:53,190
means our number is not
 divisible by three or five so

44
00:02:53,190 --> 00:02:56,430
we should simply return the same
 input once again. We don't need an

45
00:02:56,440 --> 00:02:59,840
else or another if we simply return the

46
00:02:59,840 --> 00:03:03,120
input. Now let's run this
 program and see if it's

47
00:03:03,120 --> 00:03:06,580
working properly or not.
 So we call our function with

48
00:03:06,580 --> 00:03:10,160
three and we get face beautiful. Let's

49
00:03:10,160 --> 00:03:14,360
call it with five. We get Buzz Perfect

50
00:03:14,370 --> 00:03:17,910
. What if we call it with 15.
 We should get face boss

51
00:03:18,740 --> 00:03:22,350
. However we get fears.
 What is going on here. There

52
00:03:22,350 --> 00:03:26,510
isn't. This happen was because
 when we passed 15 here. Line

53
00:03:26,510 --> 00:03:29,710
two is executed. Obviously. 15 is divisible by

54
00:03:29,710 --> 00:03:33,750
three or so. That is
 why we immediately return phase

55
00:03:34,240 --> 00:03:37,560
. To solve this problem.
 we need to move this condition. which

56
00:03:37,560 --> 00:03:41,040
is more specific to the top.
 So I've selected these

57
00:03:41,040 --> 00:03:44,600
two lines using all out and up. I

58
00:03:44,600 --> 00:03:47,840
move these lines up.
 Beautiful. All right. now let's

59
00:03:47,840 --> 00:03:51,240
run the program one more time.
 So we get fish

60
00:03:51,240 --> 00:03:55,650
balls. Once again.
 let's test it with three. Now

61
00:03:55,650 --> 00:03:59,870
we get fares less tested with five.
 When writing functions. don't

62
00:03:59,870 --> 00:04:03,140
assume that your function is working.
 Make sure to test it with all

63
00:04:03,140 --> 00:04:06,470
different kinds of values.
 Let's test it with five. We

64
00:04:06,470 --> 00:04:10,000
get buzz. Beautiful.
 What if you pass seven. which

65
00:04:10,000 --> 00:04:13,760
is not divisible by three or five.
 We get seven. Beautiful

66
00:04:14,640 --> 00:04:18,770
So what you see here
 is the simplest and most elegant implementation

67
00:04:18,770 --> 00:04:21,980
of the FizzBuzz algorithm. 
And that brings us to the end of

68
00:04:21,980 --> 00:04:25,840
this section. In the next lecture
 we're going to explore data structures

69
00:04:25,850 --> 00:04:30,030
in Python. You're gonna
 learn about lists, topples, sets

70
00:04:30,040 --> 00:04:33,960
and dictionaries. I hope you enjoyed this section
 and thank you for watching.