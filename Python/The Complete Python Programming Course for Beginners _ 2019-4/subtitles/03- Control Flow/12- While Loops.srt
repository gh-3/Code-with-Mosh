2
00:00:04,000 --> 00:00:08,020
So you have learned that we use
 for loops to iterate over iterable

3
00:00:08,020 --> 00:00:11,600
objects. In python We have
 another kind of loop that

4
00:00:11,600 --> 00:00:14,900
is a while loop. And we
 use that to repeat something as

5
00:00:14,900 --> 00:00:18,580
long as a condition is true.
 Here's an example. So

6
00:00:18,580 --> 00:00:22,040
let's define a variable
 number and set it to

7
00:00:22,120 --> 00:00:25,420
100. Now we use while and here

8
00:00:25,420 --> 00:00:28,780
we add a condition
 as long as number is

9
00:00:28,780 --> 00:00:32,440
greater than zero. We had a colon. Once

10
00:00:32,440 --> 00:00:35,890
again we have indentation so
 we can repeat one or

11
00:00:35,890 --> 00:00:40,820
more statements. We can print this number and

12
00:00:40,820 --> 00:00:44,330
then we can divide it by half.
 So number equals

13
00:00:44,330 --> 00:00:48,840
number. Use the integer division divided

14
00:00:48,840 --> 00:00:53,050
by two. Or we can
 use the argument and assignment operator

15
00:00:53,060 --> 00:00:58,640
to shorten this code. like this. Now

16
00:00:58,650 --> 00:01:02,440
let's run this program.
 So here is what we get. Initially

17
00:01:02,440 --> 00:01:05,900
. our number is 100
 were divided by half. We

18
00:01:05,900 --> 00:01:09,170
get 50 then 25 so on. So as

19
00:01:09,170 --> 00:01:12,820
you can see in this example.
 we are not iterating over

20
00:01:12,830 --> 00:01:16,000
an iterable like a range
 object or a string or

21
00:01:16,000 --> 00:01:19,290
a list. We are evaluating a condition and

22
00:01:19,290 --> 00:01:22,530
repeating a task. Let me show you

23
00:01:22,530 --> 00:01:26,360
a real world example of a
 while loop. In this interactive shell

24
00:01:26,840 --> 00:01:30,220
Python is waiting for an input.
 We can type something like two plus

25
00:01:30,220 --> 00:01:33,650
two. It will evaluate it
 and ask for the next input

26
00:01:34,240 --> 00:01:38,120
we can add another expression like
 10 is greater than two. So

27
00:01:38,120 --> 00:01:42,560
these steps will continue until repress control

28
00:01:42,570 --> 00:01:46,100
D So behind the scene
 we have a while loop that

29
00:01:46,100 --> 00:01:49,990
continuous execution until we press control D

30
00:01:50,000 --> 00:01:54,180
That is the condition that causes
 the while loop to terminate. Let

31
00:01:54,180 --> 00:01:58,390
me show you how to build
 something like this in Python. So

32
00:01:58,390 --> 00:02:01,590
let's define a variable command and set it

33
00:02:01,590 --> 00:02:04,800
to an empty string.
 Now. here we need a

34
00:02:04,800 --> 00:02:08,390
wide loop. We want this
 wild up to execute as

35
00:02:08,390 --> 00:02:12,470
long as command does
 not equal to quit. So

36
00:02:12,480 --> 00:02:16,560
command does not equal to quit Colin

37
00:02:17,740 --> 00:02:21,910
. And so we want to
 continuously get input from the user. So

38
00:02:21,910 --> 00:02:25,530
we use the built
 in input function. We add

39
00:02:25,620 --> 00:02:29,410
a label like this.
 get the result and story it

40
00:02:29,840 --> 00:02:33,420
and the command variable. Now. at this point

41
00:02:33,430 --> 00:02:36,660
. Python Interactive shell will
 evaluate this command. We are

42
00:02:36,660 --> 00:02:40,270
not going to do that in this
 lecture because that's way too complex for

43
00:02:40,270 --> 00:02:44,390
simplicity. We can just echo
 back what the user entered so

44
00:02:44,390 --> 00:02:47,690
print echo. And as

45
00:02:47,690 --> 00:02:51,510
the second argument. we pass this command. So

46
00:02:51,510 --> 00:02:55,150
this is our while loop.
 It will execute until we type

47
00:02:55,160 --> 00:02:58,440
quit. Now, As I told you before,
 don't run this

48
00:02:58,440 --> 00:03:01,940
program using the code Runner extension
 because by default it

49
00:03:01,940 --> 00:03:05,890
will run your program in the output window
 which is read only. So

50
00:03:05,890 --> 00:03:10,120
open up a terminal using
 control and back tick and

51
00:03:10,120 --> 00:03:14,270
run python or python3
 app.py. So

52
00:03:14,270 --> 00:03:17,920
here's our command. Prompt less
 Type two plus two. It

53
00:03:17,920 --> 00:03:21,660
echoes back. Let's type three times to There

54
00:03:21,660 --> 00:03:25,750
you go. If a type quit.
 our program terminates

55
00:03:26,140 --> 00:03:30,150
. Now let's try it one more time.
 What if the type quit

56
00:03:30,160 --> 00:03:33,850
an opera case. The program doesn't terminate because

57
00:03:33,860 --> 00:03:37,380
. as you learn before.
 lowercase and uppercase characters have

58
00:03:37,390 --> 00:03:40,720
different numerical representations. So quit in

59
00:03:40,720 --> 00:03:45,110
lower case is different from
 quit and opera case. Now

60
00:03:45,110 --> 00:03:48,290
. To solve this problem.
 an amateur programmer may do

61
00:03:48,290 --> 00:03:52,390
something like this. and command does

62
00:03:52,390 --> 00:03:56,770
not equal to capital quit. So

63
00:03:56,770 --> 00:03:59,890
while command does not equal. quit in

64
00:03:59,890 --> 00:04:03,540
lower case and quit in uppercase. continue getting

65
00:04:03,540 --> 00:04:06,890
input from the user Let's
 run this program in terminal and

66
00:04:06,890 --> 00:04:10,450
see what happens. So one more time Python

67
00:04:10,450 --> 00:04:14,450
apt a pie We type Quit beautiful. It

68
00:04:14,450 --> 00:04:18,090
works with type quit and upper case.
 That would work too

69
00:04:18,100 --> 00:04:22,100
. But what if I type
 quit with an uppercase Q and

70
00:04:22,110 --> 00:04:26,060
lower case. U I t.
 Our program doesn't terminate

71
00:04:26,640 --> 00:04:30,150
. So this is a poor
 way of checking for the quit command

72
00:04:30,640 --> 00:04:33,970
. What is a better way.
 Let me show you. So we don't need

73
00:04:33,970 --> 00:04:38,500
this and operator here instead because

74
00:04:38,500 --> 00:04:42,160
command is a string we
 can call the lower method

75
00:04:43,040 --> 00:04:46,480
. So whatever the user
 types in first. well converted to

76
00:04:46,480 --> 00:04:50,150
lowercase and then compare it with quit

77
00:04:50,160 --> 00:04:53,590
in lower case. With this change.
 it doesn't matter how

78
00:04:53,590 --> 00:04:56,800
the user types the word
 quit will always terminate the

