2
00:00:04,440 --> 00:00:07,930
When writing programs, many things can go wrong. 
Our programs may 

3
00:00:07,930 --> 00:00:11,550
encounter an error and terminate. 
 Usually these errors happen 

4
00:00:11,550 --> 00:00:14,750
because of programmers mistakes, 
or bad data that

5
00:00:14,750 --> 00:00:18,510
we get from the user,
or resources not being available. 
For

6
00:00:18,510 --> 00:00:22,000
example, you might need to open a file
but if that file doesn't exist

7
00:00:22,010 --> 00:00:25,770
our program is going to crash. 
It's your job as a programmer 

8
00:00:25,780 --> 00:00:29,020
to prevent your application from crashing in these 

9
00:00:29,020 --> 00:00:32,770
kind of situations. 
Instead, we want to display a proper error 

10
00:00:32,770 --> 00:00:36,160
message to the user like: 
Hey, this file doesn't exist. 
So 

11
00:00:36,160 --> 00:00:39,670
let's take a look at a few examples.
 I'm going to define a

12
00:00:39,670 --> 00:00:43,780
list of numbers with two
 items and then print the

13
00:00:43,780 --> 00:00:48,170
third item. 
When we run this program we

14
00:00:48,170 --> 00:00:51,950
get this error "IndexError", 
this happened in 

15
00:00:51,950 --> 00:00:55,430
this file app.py, 
on line 2, 
and

16
00:00:55,430 --> 00:00:58,720
here is the statement that generated this error. 
In

17
00:00:58,720 --> 00:01:02,130
programming we referred to this kind of error as an exception. 
An 

18
00:01:02,130 --> 00:01:05,670
exception is a kind of error that terminates the execution of

19
00:01:05,670 --> 00:01:09,080
a program. 
More specifically we say this line this

20
00:01:09,080 --> 00:01:12,270
statement threw an exception. 
And this is

21
00:01:12,270 --> 00:01:16,250
an example of an exception that was thrown because of 
the programmer's mistake.

22
00:01:17,340 --> 00:01:20,810
Here's another example. 
Earlier you learn about the input function to

23
00:01:20,810 --> 00:01:24,070
get input from the user.
Let's say we ask for the

24
00:01:24,070 --> 00:01:27,930
user's age. 
You know that this function returns a string so

25
00:01:27,930 --> 00:01:31,490
we need to convert it to an integer and 
then store it

26
00:01:31,500 --> 00:01:34,700
here. 
Now instead of running this using the

27
00:01:34,700 --> 00:01:38,060
code runner, let's go to the terminal and

28
00:01:38,060 --> 00:01:41,780
run python or python3 app.py. 
The

29
00:01:41,780 --> 00:01:45,670
reason I didn't run this using
Code Runner is that by default Code

30
00:01:45,670 --> 00:01:49,450
Runner runs our programs in the output window 
which is read only 

31
00:01:49,460 --> 00:01:53,240
so we cannot enter data. 
So here in the terminal. let's

32
00:01:53,240 --> 00:01:57,110
run this program. 
If we enter a non numeric value like

33
00:01:57,120 --> 00:02:00,630
a, our program crashes. 
In this example we

34
00:02:00,630 --> 00:02:04,860
got an exception of type ValueError. 
So

35
00:02:04,870 --> 00:02:08,200
as I told you before,
 it's your job as a programmer to

36
00:02:08,200 --> 00:02:11,430
handle these exceptions and 
prevent your application from crashing. 
And let's I'm gonna show you next.

