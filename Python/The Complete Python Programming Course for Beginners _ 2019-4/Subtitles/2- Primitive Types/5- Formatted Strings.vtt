WEBVTT

1
00:00:04.000 --> 00:00:08.000
Here we have two variables, first and last, let's say we want

2
00:00:08.000 --> 00:00:12.000
to print my full name on the console. So we can define

3
00:00:12.000 --> 00:00:16.000
another variable, full, set it to first,

4
00:00:16.000 --> 00:00:20.000
then concatenate it with a space

5
00:00:20.000 --> 00:00:24.000
one more time concatenate it with class. Now,

6
00:00:24.000 --> 00:00:28.000
when we print full. We get my

7
00:00:28.000 --> 00:00:32.000
full name on the console. Now this appraoch

8
00:00:32.000 --> 00:00:36.000
I'm using concatenation, to use a string is okay but

9
00:00:36.000 --> 00:00:40.000
there is a better and newer approach. We can use formatter strings.

10
00:00:40.000 --> 00:00:44.000
So here we can set full to this string.

11
00:00:44.000 --> 00:00:48.000
And prefix it with an f which can be lowercase

12
00:00:48.000 --> 00:00:52.000
or uppercase. This formatted string doesn't have the

13
00:00:52.000 --> 00:00:56.000
constant value like these two strings here, it's

14
00:00:56.000 --> 00:01:00.000
actually an expression that will be evaluated at  runtime. So

15
00:01:00.000 --> 00:01:04.000
here we want to add our first name, we use curly braces

16
00:01:04.000 --> 00:01:08.000
to print the value of the first variable.

17
00:01:08.000 --> 00:01:12.000
After that we add a space and then we add

18
00:01:12.000 --> 00:01:16.000
curly braces one more time to print the last

19
00:01:16.000 --> 00:01:20.000
so at runtime this expression has to be evaluated

20
00:01:20.000 --> 00:01:24.000
what we have in between curly braces will be

21
00:01:24.000 --> 00:01:28.000
replaced at runtime. Now, let's run this program one more time

22
00:01:28.000 --> 00:01:32.000
we get the exact same result, just be aware

23
00:01:32.000 --> 00:01:36.000
that you can put any value expressions in between

24
00:01:36.000 --> 00:01:40.000
curly braces. So earlier you learned about the built in

25
00:01:40.000 --> 00:01:44.000
function, you can call len here and get the

26
00:01:44.000 --> 00:01:48.000
length of this string, lets run this program one more time,

27
00:01:48.000 --> 00:01:52.000
so we get 4, we can also replace

28
00:01:52.000 --> 00:01:56.000
last with an expression like this. Two plus two. Let's run

29
00:01:56.000 --> 00:02:00.000
this program, we get 4 and 4. So,

30
00:02:00.000 --> 00:02:04.000
when using formatted strings, you can put any valid expressions

31
00:02:04.000 --> 00:02:08.000
in between curly braces.
