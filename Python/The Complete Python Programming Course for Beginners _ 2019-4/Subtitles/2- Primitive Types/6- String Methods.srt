1
00:00:03,960 --> 00:00:04,680
In this next hour,

2
00:00:04,880 --> 00:00:08,960
we're going to look at a few useful
functions available to work with strings.

3
00:00:09,160 --> 00:00:13,120
So earlier you learned about
this built-In land function.

4
00:00:13,320 --> 00:00:16,760
This function is general purpose,
so it's not limited to strings.

5
00:00:16,960 --> 00:00:21,120
Later, I will show you how to use this
function with other kind of objects.

6
00:00:21,320 --> 00:00:25,840
But in Python, we have quite a few
functions that are specific to a strings.

7
00:00:26,040 --> 00:00:27,080
Let me show you.

8
00:00:27,280 --> 00:00:35,400
So here, if we type coarse dot see
all these are functions available

9
00:00:35,600 --> 00:00:41,320
on strings now in precise terms,
refer to these functions as methods.

10
00:00:41,520 --> 00:00:43,320
This is a term and object oriented

11
00:00:43,520 --> 00:00:46,640
programing that you will learn
about later in the course.

12
00:00:46,840 --> 00:00:52,360
For now, what I want you to take away is
that everything in Python is an object

13
00:00:52,560 --> 00:00:59,440
and objects have functions we call methods
that we can access using the DOT notation.

14
00:00:59,640 --> 00:01:01,400
So here course is an object.

15
00:01:01,600 --> 00:01:06,800
We use the DOT notation to access its
functions or more accurately, methods.

16
00:01:07,000 --> 00:01:08,400
Let's take a look at a few of these

17
00:01:08,600 --> 00:01:13,000
methods we have up here
to convert a string to uppercase.

18
00:01:13,200 --> 00:01:17,480
Now let's print this and run the program.

19
00:01:17,680 --> 00:01:19,720
Here is what we get.
Beautiful.

20
00:01:19,920 --> 00:01:24,080
That note that the methods that you
call here return a new string.

21
00:01:24,280 --> 00:01:27,440
So the original string is not a factor.
Let me show you.

22
00:01:27,640 --> 00:01:32,200
So print course,
run the program one more time.

23
00:01:32,400 --> 00:01:35,080
Look, this is our original string, right?

24
00:01:35,280 --> 00:01:39,640
So, of course, the upper returns
and new string, a new value.

25
00:01:39,840 --> 00:01:45,200
We can store it in a variable like course
underlying capital

26
00:01:45,440 --> 00:01:46,720
like this.

27
00:01:46,920 --> 00:01:48,520
Now, to keep this demo simple

28
00:01:48,720 --> 00:01:54,160
and consistent, I'm going to revert
this back and use a print statement.

29
00:01:54,360 --> 00:01:59,440
We also have the lower method
to convert a string to lowercase.

30
00:01:59,640 --> 00:02:05,600
We also have title which will capitalize
the first letter of every word.

31
00:02:05,800 --> 00:02:09,720
So if our string was like this,

32
00:02:09,920 --> 00:02:15,480
when we call the title method, we get
Python programing, as you see here.

33
00:02:15,680 --> 00:02:17,120
OK.

34
00:02:17,360 --> 00:02:19,240
Another useful method is strip,

35
00:02:19,440 --> 00:02:24,200
and we use it to trim any white space at
the beginning or end of history string.

36
00:02:24,400 --> 00:02:28,360
This is particularly useful when
we receive input from the user.

37
00:02:28,560 --> 00:02:31,440
Let me show you.
So let's imagine

38
00:02:31,640 --> 00:02:36,760
the user entered a couple of white
spaces at the beginning of this string.

39
00:02:36,960 --> 00:02:42,320
When we call coarse that strip,
those white spaces will be removed.

40
00:02:42,520 --> 00:02:43,960
Take a look.

41
00:02:44,160 --> 00:02:46,120
So note that in the first three examples,

42
00:02:46,320 --> 00:02:50,840
we have those white spaces,
but in the last one it is removed.

43
00:02:51,040 --> 00:02:55,720
So a strip remove the white space from
both the beginning and end of a string.

44
00:02:55,920 --> 00:02:58,040
We also have a L strip,

45
00:02:58,240 --> 00:03:02,880
which is short for left strip and our
strip, which is short or right strip.

46
00:03:03,080 --> 00:03:06,440
So it will remove the white
space from the end of history.

47
00:03:06,640 --> 00:03:11,240
If you want to get the index
of a character or a sequence of characters

48
00:03:11,440 --> 00:03:15,040
in your string, you should
use the find method and.

49
00:03:15,240 --> 00:03:22,080
So, of course, that find
so as an argument here to pass another

50
00:03:22,280 --> 00:03:27,320
string, we can pass a character
or a series of characters.

51
00:03:27,520 --> 00:03:30,800
Let's find the index of Pro

52
00:03:31,000 --> 00:03:32,120
Rhondda, the program.

53
00:03:32,320 --> 00:03:34,440
So the index of Pro is nine.

54
00:03:34,640 --> 00:03:42,080
So if you start from zero here all the way
to nine, this is the index of pro, OK.

55
00:03:42,280 --> 00:03:43,280
Now, as I told you before,

56
00:03:43,480 --> 00:03:48,760
Python is a case sensitive language,
so if I pass a capital P here,

57
00:03:48,960 --> 00:03:53,200
obviously we don't have these
exact characters in our string.

58
00:03:53,400 --> 00:03:55,800
So let's see what we get.

59
00:03:56,000 --> 00:03:57,360
We get a negative one,

60
00:03:57,560 --> 00:04:01,800
that means this string was not
found in the original string.

61
00:04:02,000 --> 00:04:08,400
Another useful method is replace,
so we call replace with this,

62
00:04:08,600 --> 00:04:12,880
we can replace a character or a sequence
of characters with something else.

63
00:04:13,080 --> 00:04:18,320
So let's say we want to replace
all lowercase PS with J.

64
00:04:18,520 --> 00:04:24,880
With this, we get Jitendra programing,
whatever that means.

65
00:04:25,080 --> 00:04:25,840
And finally,

66
00:04:26,040 --> 00:04:30,760
if you want to check for the existence
of a character or a sequence of characters

67
00:04:30,960 --> 00:04:34,360
in your string, you can
use that in operator.

68
00:04:34,560 --> 00:04:36,880
Let me show you.
So print.

69
00:04:37,240 --> 00:04:42,760
Right, an expression
like this pro in course.

70
00:04:42,960 --> 00:04:44,360
So this is an expression,

71
00:04:44,560 --> 00:04:49,200
as I told you before, an expression is
a piece of code that produces a value.

72
00:04:49,400 --> 00:04:53,880
So this expression checks to see
if you have a pro in course.

73
00:04:54,080 --> 00:04:58,480
The difference between this expression
and calling the find method is

74
00:04:58,680 --> 00:05:04,040
that the fine method returns the index
of these characters in our stream.

75
00:05:04,240 --> 00:05:06,640
But as this expression returns, a boolean.

76
00:05:06,840 --> 00:05:08,080
So it's a true or false.

77
00:05:08,280 --> 00:05:11,200
Let me show you sort of run the program.

78
00:05:11,400 --> 00:05:13,480
We get the boolean.

79
00:05:13,480 --> 00:05:14,920
True.

80
00:05:15,120 --> 00:05:20,440
And finally, we have the knot operator
and we use that to see if our string does

81
00:05:20,640 --> 00:05:26,000
not contain a character or
sequence of characters, so.

82
00:05:26,880 --> 00:05:30,760
Let's change this to Swift.

83
00:05:30,960 --> 00:05:35,640
Not in course when this
expression is evaluated.

84
00:05:35,680 --> 00:05:37,240
What do you think we're going to get?

85
00:05:37,440 --> 00:05:43,440
Well, we don't have swift in this
string, so not in will return.

86
00:05:43,440 --> 00:05:45,920
True.
Let's take a look.

87
00:05:46,120 --> 00:05:48,200
There you go.

88
00:05:48,640 --> 00:05:50,840
So these are the useful string methods.

89
00:05:51,040 --> 00:05:52,560
Next, we'll look at numbers.

